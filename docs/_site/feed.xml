<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-05-14T23:39:21+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">bolero2.log</title><subtitle>&quot;&quot;
</subtitle><entry><title type="html">[DL] NMS, Non-Maximum Suppression 파헤치기</title><link href="http://localhost:4000/deeplearning/2022/05/12/DL-Principle-of-NMS/" rel="alternate" type="text/html" title="[DL] NMS, Non-Maximum Suppression 파헤치기" /><published>2022-05-12T00:00:00+09:00</published><updated>2022-05-12T00:00:00+09:00</updated><id>http://localhost:4000/deeplearning/2022/05/12/DL-Principle-of-NMS</id><content type="html" xml:base="http://localhost:4000/deeplearning/2022/05/12/DL-Principle-of-NMS/"><![CDATA[<p><span class="tag  is-primary ">
    DeepLearning
</span>
<span class="tag  is-primary ">
    ObjectDetection
</span></p>

<h2 id="0-intro">0. Intro</h2>

<p>NMS란? Non-maximum Suppression의 약자로써, <strong>비최대 억제 알고리즘</strong>으로 생각하면 된다.
말 그대로, 최대가 아닌 박스들(=Bounding Box)을 삭제하는 알고리즘이다.</p>

<p><strong>Object Detection</strong> Task에서 객체에 대한 최종 Bounding Box를 결정지을 때 사용한다.</p>

<hr />

<h2 id="1-principle">1. Principle</h2>

<p>작동 방식은 다음과 같다.</p>

<blockquote>
  <ol>
    <li>Prediction할 이미지를 Network에 Forward 시킨다.</li>
    <li>출력 가능한 모든 박스를 구한다. (NMS 이전이므로, 수십~수백개의 박스 정보가 나온다.)</li>
    <li>해당 박스 정보들을 <strong>Confidence Score</strong> 순으로 정렬한다.</li>
    <li>박스 정보들의 <strong>Confidence Score</strong>와, 각 박스 간의 <strong>IoU</strong>를 바탕으로 하여 NMS를 적용한다.</li>
    <li>NMS 적용 후에는, 알맞는 박스라고 여겨지는 값들만 출력된다.</li>
  </ol>
</blockquote>

<p>핵심 키워드를 뽑자면, <strong>Confidence Score</strong>와 <strong>IoU</strong>라고 생각한다. (이 두 단어로 구현이 가능함.)</p>

<h3 id="1-1-confidence-score">1-1. Confidence-Score?</h3>

<p>여기서 <strong>Confidence Score(신뢰도, 신뢰 점수)</strong>라고 하는 것은
<strong>네트워크가 정답을 도출해냈을 때, 그 정답에 대해 n%의 확신도를 갖는다는 의미</strong>이다.</p>

<p>예를 들어, A 박스에 대한 Confidence Score가 0.75라면,
네트워크가 생각했을 때 “아, 이 박스를 내가 도출하긴 했는데, 이 박스가 정답일 확률은 <strong>75%</strong> 정도야.” 라는 의미이다.</p>

<h3 id="1-2-iou">1-2. IoU?</h3>

<p>IoU는 <strong>Intersection Over Union</strong>의 약자이다.
<img src="https://images.velog.io/images/bolero2/post/93cd3e8c-b77f-4de9-a3f4-d7683c4e6838/iou.png" alt="iou.png" /></p>

<p>(Object Detection 을 다뤄본 개발자라면 많이 접해봤을 듯한 그림.)</p>

<p>쉽게 말해서, 두 박스의 <strong>교집합</strong> / 두 박스의 <strong>합집합</strong> 이다.
코드로 보자면 다음과 같다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">iou</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">_is_box_intersect</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">):</span>
        <span class="k">if</span> <span class="p">(</span>
            <span class="nb">abs</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">box2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&lt;</span> <span class="n">box1</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">box2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
            <span class="ow">and</span> <span class="nb">abs</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">box2</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;</span> <span class="n">box1</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">box2</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
        <span class="p">):</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

    <span class="k">def</span> <span class="nf">_get_area</span><span class="p">(</span><span class="n">box</span><span class="p">):</span>			<span class="c1"># area of box n.
</span>        <span class="k">return</span> <span class="n">box</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">_get_intersection_area</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">):</span>
    <span class="c1"># intersection area
</span>        <span class="k">return</span> <span class="nb">abs</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">box2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">box1</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">box2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">box2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="nb">abs</span><span class="p">(</span>
            <span class="nb">max</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">box2</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">box1</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">box2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">box2</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
        <span class="p">)</span>
    <span class="k">def</span> <span class="nf">_get_union_area</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">,</span> <span class="n">inter_area</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">area_a</span> <span class="o">=</span> <span class="n">_get_area</span><span class="p">(</span><span class="n">box1</span><span class="p">)</span>
        <span class="n">area_b</span> <span class="o">=</span> <span class="n">_get_area</span><span class="p">(</span><span class="n">box2</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">inter_area</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">inter_area</span> <span class="o">=</span> <span class="n">_get_intersection_area</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">)</span>

        <span class="k">return</span> <span class="nb">float</span><span class="p">(</span><span class="n">area_a</span> <span class="o">+</span> <span class="n">area_b</span> <span class="o">-</span> <span class="n">inter_area</span><span class="p">)</span>    

    <span class="c1"># if boxes do not intersect
</span>    <span class="k">if</span> <span class="n">_is_box_intersect</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
        
    <span class="n">inter_area</span> <span class="o">=</span> <span class="n">_get_intersection_area</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">)</span>
    <span class="n">union</span> <span class="o">=</span> <span class="n">_get_union_area</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">,</span> <span class="n">inter_area</span><span class="o">=</span><span class="n">inter_area</span><span class="p">)</span>
    
    <span class="c1"># intersection over union
</span>    <span class="n">iou</span> <span class="o">=</span> <span class="n">inter_area</span> <span class="o">/</span> <span class="n">union</span>
    <span class="k">if</span> <span class="n">iou</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">iou</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">assert</span> <span class="n">iou</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="sa">f</span><span class="s">"Measure is wrong! : IoU Value is [</span><span class="si">{</span><span class="n">iou</span><span class="si">}</span><span class="s">]."</span>
    <span class="k">return</span> <span class="n">iou</span>
</code></pre></div></div>

<p>box1과 box2가 입력으로 왔을 때, 두 박스의 IoU를 계산해주는 코드이다.
box의 좌표 체계는 <strong>[center_x, center_y, width, height]</strong> 이고, <strong>상대 좌표</strong> 이다.
(YOLO의 라벨링 방법이라고 생각하면 된다.)</p>

<hr />

<h2 id="2-sample-code">2. Sample Code</h2>

<p>코드로 살펴보자.
임의로 박스 정보들을 생성해주고, Confidence Score 값도 넣어주었다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">colorset</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>		<span class="c1"># Red
</span>        <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>		<span class="c1"># Green
</span>        <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>		<span class="c1"># Blue
</span>        <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>		<span class="c1"># Cyan
</span>        <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>		<span class="c1"># Magenta
</span>        <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>		<span class="c1"># Yellow
</span><span class="p">]</span>

<span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">600</span><span class="p">,</span> <span class="mi">600</span>

<span class="n">boxes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># left sector boxes
</span>    <span class="p">[</span><span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">],</span>        <span class="c1"># Red
</span>    <span class="p">[</span><span class="mf">0.31</span><span class="p">,</span> <span class="mf">0.28</span><span class="p">,</span> <span class="mf">0.14</span><span class="p">,</span> <span class="mf">0.13</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">],</span>    <span class="c1"># Green
</span>    <span class="p">[</span><span class="mf">0.28</span><span class="p">,</span> <span class="mf">0.28</span><span class="p">,</span> <span class="mf">0.09</span><span class="p">,</span> <span class="mf">0.11</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">],</span>    <span class="c1"># Blue
</span>
    <span class="c1"># right sector boxes
</span>    <span class="p">[</span><span class="mf">0.75</span><span class="p">,</span> <span class="mf">0.65</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.99</span><span class="p">],</span>     <span class="c1"># cyan
</span>    <span class="p">[</span><span class="mf">0.7</span><span class="p">,</span> <span class="mf">0.63</span><span class="p">,</span> <span class="mf">0.22</span><span class="p">,</span> <span class="mf">0.18</span><span class="p">,</span> <span class="mf">0.35</span><span class="p">],</span>    <span class="c1"># magenta
</span>    <span class="p">[</span><span class="mf">0.75</span><span class="p">,</span> <span class="mf">0.62</span><span class="p">,</span> <span class="mf">0.22</span><span class="p">,</span> <span class="mf">0.22</span><span class="p">,</span> <span class="mf">0.77</span><span class="p">],</span>   <span class="c1"># yellow
</span><span class="p">]</span>
</code></pre></div></div>
<p><strong>박스 정보는 [center_x, center_y, width, height, conf_score] 순으로 구성되어 있고,
절대 좌표이다. (0~1 사이로 스케일링 된 값)</strong></p>

<p>해당 박스들을 600 * 600의 빈 캔버스에 그려보면, 다음과 같은 박스를 볼 수 있다.</p>

<p><img src="https://images.velog.io/images/bolero2/post/c166b00b-67ec-4c8c-a644-40a47109769e/before_nms.jpg" alt="before_nms.jpg" /></p>

<p><strong>(박스 그려주는 코드)</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">canvas</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">3</span><span class="p">)).</span><span class="n">astype</span><span class="p">(</span><span class="s">'uint8'</span><span class="p">)</span>			<span class="c1"># empty canvas
</span><span class="n">canvas_copy</span> <span class="o">=</span> <span class="n">canvas</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>						<span class="c1"># for after nms
</span>
<span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">box</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">boxes</span><span class="p">):</span>
    <span class="n">cv2</span><span class="p">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">canvas</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">width</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">height</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">height</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">3</span><span class="p">])),</span>
                          <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">width</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">height</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">height</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">3</span><span class="p">])),</span>
                          <span class="n">colorset</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>임의로 만든 박스들이기 때문에, 우리는 어떤 것이 NMS 통과 후에 남아야 하는지 알 수 있다.
바로 <strong>Red</strong>와 <strong>Cyan</strong> 색상의 박스만 남아야 한다.
<em>(이유는, 좌/우측 섹터 기준으로 신뢰 점수가 가장 높기 때문이다.)</em></p>

<p>그리고, <strong>NMS(boxes, iou_thres=0.4)</strong> 함수를 작성해주었다. (중간에 출력을 디버깅해볼 수 있는 print문이 있다.)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">nms</span><span class="p">(</span><span class="n">boxes</span><span class="p">,</span> <span class="n">iou_thres</span><span class="o">=</span><span class="mf">0.4</span><span class="p">):</span>
    <span class="n">elems</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">boxes</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Before Arrange"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">elems</span><span class="p">)</span>

    <span class="c1"># sorting
</span>    <span class="n">sorted_index</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argsort</span><span class="p">(</span><span class="n">elems</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">sorted_boxes</span> <span class="o">=</span> <span class="n">elems</span><span class="p">[</span><span class="n">sorted_index</span><span class="p">]</span>

    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">After Arrange"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">)</span>

    <span class="n">answer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">True</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])]</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Before NMS Answer :"</span><span class="p">,</span> <span class="n">answer</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="k">if</span> <span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
            <span class="n">iou_val</span> <span class="o">=</span> <span class="n">iou</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">sorted_boxes</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> vs </span><span class="si">{</span><span class="n">j</span><span class="si">}</span><span class="s"> = iou </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">iou_val</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">iou_val</span> <span class="o">&gt;=</span> <span class="n">iou_thres</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">iou_val</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">answer</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Index </span><span class="si">{</span><span class="n">j</span><span class="si">}</span><span class="s"> is False."</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">After NMS Answer :"</span><span class="p">,</span> <span class="n">answer</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">,</span> <span class="n">sorted_boxes</span><span class="p">,</span> <span class="n">sorted_index</span>
</code></pre></div></div>

<p>순서는 <strong>1. 원리</strong>에서 본 것과 동일하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sorted_index</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argsort</span><span class="p">(</span><span class="n">elems</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">sorted_boxes</span> <span class="o">=</span> <span class="n">elems</span><span class="p">[</span><span class="n">sorted_index</span><span class="p">]</span>
</code></pre></div></div>
<p>여기 부분에서 Confidence Score 순으로 box 정보들을 정렬하고,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="k">if</span> <span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
        <span class="k">continue</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="n">iou_val</span> <span class="o">=</span> <span class="n">iou</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">sorted_boxes</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> vs </span><span class="si">{</span><span class="n">j</span><span class="si">}</span><span class="s"> = iou </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">iou_val</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">iou_val</span> <span class="o">&gt;=</span> <span class="n">iou_thres</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">iou_val</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">answer</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Index </span><span class="si">{</span><span class="n">j</span><span class="si">}</span><span class="s"> is False."</span><span class="p">)</span>
</code></pre></div></div>
<p>부분에서 실제로 IoU 값을 구하면서, 탈락 여부를 결정한다.</p>

<p>IoU Threshold를 0.4로 설정하였기 때문에,
박스 간의 IoU 값이 0.4 이상인 경우에는, <strong>Confidence Score가 낮은 박스가 탈락한다.</strong></p>

<p>탈락 여부는 <code class="language-plaintext highlighter-rouge">answer = [True for x in range(sorted_boxes.shape[0])]</code> 로 미리 박스 개수만큼 True를 적어두고,
탈락된 박스 자리에 <code class="language-plaintext highlighter-rouge">False</code>를 기록한다.</p>

<hr />

<p>디버깅 출력물은 다음과 같다.</p>

<ul>
  <li>** 정렬 이전의 box 정보들**
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Before</span> <span class="n">Arrange</span>
<span class="p">[[</span><span class="mf">0.3</span>  <span class="mf">0.3</span>  <span class="mf">0.1</span>  <span class="mf">0.1</span>  <span class="mf">0.9</span> <span class="p">]</span>
 <span class="p">[</span><span class="mf">0.31</span> <span class="mf">0.28</span> <span class="mf">0.14</span> <span class="mf">0.13</span> <span class="mf">0.5</span> <span class="p">]</span>
 <span class="p">[</span><span class="mf">0.28</span> <span class="mf">0.28</span> <span class="mf">0.09</span> <span class="mf">0.11</span> <span class="mf">0.3</span> <span class="p">]</span>
 <span class="p">[</span><span class="mf">0.75</span> <span class="mf">0.65</span> <span class="mf">0.2</span>  <span class="mf">0.2</span>  <span class="mf">0.99</span><span class="p">]</span>
 <span class="p">[</span><span class="mf">0.7</span>  <span class="mf">0.63</span> <span class="mf">0.22</span> <span class="mf">0.18</span> <span class="mf">0.35</span><span class="p">]</span>
 <span class="p">[</span><span class="mf">0.75</span> <span class="mf">0.62</span> <span class="mf">0.22</span> <span class="mf">0.22</span> <span class="mf">0.77</span><span class="p">]]</span>
</code></pre></div>    </div>
  </li>
  <li><strong>정렬 이후의 box 정보들</strong> (confidence score 순서로 잘 정렬되었다.)
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">After</span> <span class="n">Arrange</span>
<span class="p">[[</span><span class="mf">0.75</span> <span class="mf">0.65</span> <span class="mf">0.2</span>  <span class="mf">0.2</span>  <span class="mf">0.99</span><span class="p">]</span>
 <span class="p">[</span><span class="mf">0.3</span>  <span class="mf">0.3</span>  <span class="mf">0.1</span>  <span class="mf">0.1</span>  <span class="mf">0.9</span> <span class="p">]</span>
 <span class="p">[</span><span class="mf">0.75</span> <span class="mf">0.62</span> <span class="mf">0.22</span> <span class="mf">0.22</span> <span class="mf">0.77</span><span class="p">]</span>
 <span class="p">[</span><span class="mf">0.31</span> <span class="mf">0.28</span> <span class="mf">0.14</span> <span class="mf">0.13</span> <span class="mf">0.5</span> <span class="p">]</span>
 <span class="p">[</span><span class="mf">0.7</span>  <span class="mf">0.63</span> <span class="mf">0.22</span> <span class="mf">0.18</span> <span class="mf">0.35</span><span class="p">]</span>
 <span class="p">[</span><span class="mf">0.28</span> <span class="mf">0.28</span> <span class="mf">0.09</span> <span class="mf">0.11</span> <span class="mf">0.3</span> <span class="p">]]</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Answer라는 변수를 두고, 탈락 여부를 위한 리스트를 생성했다.</strong>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Before</span> <span class="n">NMS</span> <span class="n">Answer</span> <span class="p">:</span> <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">]</span>
</code></pre></div>    </div>
  </li>
  <li><strong>NMS 동작 과정, 탈락하면 Answer[index]에 False를 기록한다.</strong>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">0</span> <span class="n">vs</span> <span class="mi">0</span> <span class="o">=</span> <span class="n">iou</span> <span class="mf">1.0</span>
<span class="mi">0</span> <span class="n">vs</span> <span class="mi">1</span> <span class="o">=</span> <span class="n">iou</span> <span class="mi">0</span>
<span class="mi">0</span> <span class="n">vs</span> <span class="mi">2</span> <span class="o">=</span> <span class="n">iou</span> <span class="mf">0.754</span>
<span class="n">Index</span> <span class="mi">2</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">.</span>
<span class="mi">0</span> <span class="n">vs</span> <span class="mi">3</span> <span class="o">=</span> <span class="n">iou</span> <span class="mi">0</span>
<span class="mi">0</span> <span class="n">vs</span> <span class="mi">4</span> <span class="o">=</span> <span class="n">iou</span> <span class="mf">0.519</span>
<span class="n">Index</span> <span class="mi">4</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">.</span>
<span class="mi">0</span> <span class="n">vs</span> <span class="mi">5</span> <span class="o">=</span> <span class="n">iou</span> <span class="mi">0</span>
<span class="mi">1</span> <span class="n">vs</span> <span class="mi">0</span> <span class="o">=</span> <span class="n">iou</span> <span class="mi">0</span>
<span class="mi">1</span> <span class="n">vs</span> <span class="mi">1</span> <span class="o">=</span> <span class="n">iou</span> <span class="mf">1.0</span>
<span class="mi">1</span> <span class="n">vs</span> <span class="mi">2</span> <span class="o">=</span> <span class="n">iou</span> <span class="mi">0</span>
<span class="mi">1</span> <span class="n">vs</span> <span class="mi">3</span> <span class="o">=</span> <span class="n">iou</span> <span class="mf">0.469</span>
<span class="n">Index</span> <span class="mi">3</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">.</span>
<span class="mi">1</span> <span class="n">vs</span> <span class="mi">4</span> <span class="o">=</span> <span class="n">iou</span> <span class="mi">0</span>
<span class="mi">1</span> <span class="n">vs</span> <span class="mi">5</span> <span class="o">=</span> <span class="n">iou</span> <span class="mf">0.463</span>
<span class="n">Index</span> <span class="mi">5</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">.</span>
</code></pre></div>    </div>
    <p>: 원래는 자기 자신과는 비교하면 안되는데, 그냥 비교하게 짰다. (심플하게)
그 부분 처리를 위해 코드에 <code class="language-plaintext highlighter-rouge">int(iou_val) != 1</code>인 조건을 추가하였다.
<strong>(iou_val이 1이라는 뜻은, 자기 자신과 비교한 경우이다.)</strong></p>
  </li>
</ul>

<p>이제 보면, 2개의 경우가 있다.</p>
<ul>
  <li><strong>IoU가 0.4보다 작을 경우</strong></li>
  <li><strong>IoU가 0.4보다 클 경우</strong></li>
</ul>

<p>1) 작을 경우는, <strong>살아남는 박스</strong>이다.
2) 클 경우는, <strong>탈락하는 박스</strong>이다.
(0.9 conf의 박스와 0.4 conf의 박스를 비교하여 iou_val == 0.5라고 한다면, 0.4 conf의 박스가 탈락한다.)</p>

<ul>
  <li><strong>NMS 이후에 살아남는 박스의 index, Answer 변수에 boolean 값으로 알 수 있다.</strong>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">After</span> <span class="n">NMS</span> <span class="n">Answer</span> <span class="p">:</span> <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">]</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>return 되는 값은, Answer 변수와 sorted_boxes, sorted_index를 반환해주었다.
main 문에서 박스를 잘 볼 수 있게 하기 위함이다.</p>

<hr />

<h2 id="3-result">3. Result</h2>

<p>main 문에서 다음과 같이 NMS 함수를 호출한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">answer</span><span class="p">,</span> <span class="n">sorted_boxes</span><span class="p">,</span> <span class="n">sorted_index</span> <span class="o">=</span> <span class="n">nms</span><span class="p">(</span><span class="n">boxes</span><span class="p">,</span> <span class="n">iou_thres</span><span class="o">=</span><span class="mf">0.4</span><span class="p">)</span>
</code></pre></div></div>
<p><strong>여기서 boxes는 before Arrange 박스들이다.</strong></p>

<p>그리고, answer과 sorted_boxes, sorted_index 정보를 바탕으로,
새로운 비어있는 canvas에 그려준다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">datum</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">,</span> <span class="n">sorted_index</span><span class="p">)):</span>
    <span class="n">sbox</span><span class="p">,</span> <span class="n">sidx</span> <span class="o">=</span> <span class="n">datum</span>
    <span class="k">if</span> <span class="n">answer</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">cv2</span><span class="p">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">canvas_copy</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">width</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">height</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">height</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">3</span><span class="p">])),</span>
                                   <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">width</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">height</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">height</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">3</span><span class="p">])),</span>
                                   <span class="n">colorset</span><span class="p">[</span><span class="n">sidx</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>
<p><strong>(Answer 변수가 <em>True</em> 인 box만 그려준다.)</strong></p>

<p>그러면, 다음과 같이 Red와 Cyan 색상의 박스만 남은 것을 알 수 있다.
<img src="https://images.velog.io/images/bolero2/post/509a537d-77a4-41c6-8c59-b5bb0fa6e2a0/after_nms.jpg" alt="after_nms.py" /></p>

<hr />

<h2 id="4-full-code">4. Full Code</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>


<span class="k">def</span> <span class="nf">iou</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">_is_box_intersect</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">):</span>
        <span class="k">if</span> <span class="p">(</span>
            <span class="nb">abs</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">box2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&lt;</span> <span class="n">box1</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">box2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
            <span class="ow">and</span> <span class="nb">abs</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">box2</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;</span> <span class="n">box1</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">box2</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
        <span class="p">):</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

    <span class="k">def</span> <span class="nf">_get_area</span><span class="p">(</span><span class="n">box</span><span class="p">):</span>			<span class="c1"># area of box n.
</span>        <span class="k">return</span> <span class="n">box</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">_get_intersection_area</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">):</span>
    <span class="c1"># intersection area
</span>        <span class="k">return</span> <span class="nb">abs</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">box2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">box1</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">box2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">box2</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span> <span class="o">*</span> <span class="nb">abs</span><span class="p">(</span>
            <span class="nb">max</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">box2</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">-</span> <span class="nb">min</span><span class="p">(</span><span class="n">box1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">box1</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">box2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">box2</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
        <span class="p">)</span>
    <span class="k">def</span> <span class="nf">_get_union_area</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">,</span> <span class="n">inter_area</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">area_a</span> <span class="o">=</span> <span class="n">_get_area</span><span class="p">(</span><span class="n">box1</span><span class="p">)</span>
        <span class="n">area_b</span> <span class="o">=</span> <span class="n">_get_area</span><span class="p">(</span><span class="n">box2</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">inter_area</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">inter_area</span> <span class="o">=</span> <span class="n">_get_intersection_area</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">)</span>

        <span class="k">return</span> <span class="nb">float</span><span class="p">(</span><span class="n">area_a</span> <span class="o">+</span> <span class="n">area_b</span> <span class="o">-</span> <span class="n">inter_area</span><span class="p">)</span>    

    <span class="c1"># if boxes do not intersect
</span>    <span class="k">if</span> <span class="n">_is_box_intersect</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
        
    <span class="n">inter_area</span> <span class="o">=</span> <span class="n">_get_intersection_area</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">)</span>
    <span class="n">union</span> <span class="o">=</span> <span class="n">_get_union_area</span><span class="p">(</span><span class="n">box1</span><span class="p">,</span> <span class="n">box2</span><span class="p">,</span> <span class="n">inter_area</span><span class="o">=</span><span class="n">inter_area</span><span class="p">)</span>
    
    <span class="c1"># intersection over union
</span>    <span class="n">iou</span> <span class="o">=</span> <span class="n">inter_area</span> <span class="o">/</span> <span class="n">union</span>
    <span class="k">if</span> <span class="n">iou</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">iou</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">assert</span> <span class="n">iou</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="sa">f</span><span class="s">"Measure is wrong! : IoU Value is [</span><span class="si">{</span><span class="n">iou</span><span class="si">}</span><span class="s">]."</span>
    <span class="k">return</span> <span class="n">iou</span>


<span class="k">def</span> <span class="nf">nms</span><span class="p">(</span><span class="n">boxes</span><span class="p">,</span> <span class="n">iou_thres</span><span class="o">=</span><span class="mf">0.4</span><span class="p">):</span>
    <span class="n">elems</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">boxes</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Before Arrange"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">elems</span><span class="p">)</span>

    <span class="c1"># sorting
</span>    <span class="n">sorted_index</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argsort</span><span class="p">(</span><span class="n">elems</span><span class="p">[:,</span> <span class="o">-</span><span class="mi">1</span><span class="p">])[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">sorted_boxes</span> <span class="o">=</span> <span class="n">elems</span><span class="p">[</span><span class="n">sorted_index</span><span class="p">]</span>

    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">After Arrange"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">)</span>

    <span class="n">answer</span> <span class="o">=</span> <span class="p">[</span><span class="bp">True</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])]</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Before NMS Answer :"</span><span class="p">,</span> <span class="n">answer</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
        <span class="k">if</span> <span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
            <span class="n">iou_val</span> <span class="o">=</span> <span class="n">iou</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">sorted_boxes</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> vs </span><span class="si">{</span><span class="n">j</span><span class="si">}</span><span class="s"> = iou </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">iou_val</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">iou_val</span> <span class="o">&gt;=</span> <span class="n">iou_thres</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">iou_val</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">answer</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
                <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Index </span><span class="si">{</span><span class="n">j</span><span class="si">}</span><span class="s"> is False."</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">After NMS Answer :"</span><span class="p">,</span> <span class="n">answer</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">answer</span><span class="p">,</span> <span class="n">sorted_boxes</span><span class="p">,</span> <span class="n">sorted_index</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">colorset</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
        <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">124</span><span class="p">),</span>
    <span class="p">]</span>

    <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="mi">600</span><span class="p">,</span> <span class="mi">600</span>

    <span class="n">boxes</span> <span class="o">=</span> <span class="p">[</span>
        <span class="c1"># left boxes
</span>        <span class="p">[</span><span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">],</span>                  <span class="c1"># Red
</span>        <span class="p">[</span><span class="mf">0.31</span><span class="p">,</span> <span class="mf">0.28</span><span class="p">,</span> <span class="mf">0.14</span><span class="p">,</span> <span class="mf">0.13</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">],</span>              <span class="c1"># Green
</span>        <span class="p">[</span><span class="mf">0.28</span><span class="p">,</span> <span class="mf">0.28</span><span class="p">,</span> <span class="mf">0.09</span><span class="p">,</span> <span class="mf">0.11</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">],</span>              <span class="c1"># Blue
</span>
        <span class="c1"># right boxes
</span>        <span class="p">[</span><span class="mf">0.75</span><span class="p">,</span> <span class="mf">0.65</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.99</span><span class="p">],</span>               <span class="c1"># cyan
</span>        <span class="p">[</span><span class="mf">0.7</span><span class="p">,</span> <span class="mf">0.63</span><span class="p">,</span> <span class="mf">0.22</span><span class="p">,</span> <span class="mf">0.18</span><span class="p">,</span> <span class="mf">0.35</span><span class="p">],</span>              <span class="c1"># magenta
</span>        <span class="p">[</span><span class="mf">0.75</span><span class="p">,</span> <span class="mf">0.62</span><span class="p">,</span> <span class="mf">0.22</span><span class="p">,</span> <span class="mf">0.22</span><span class="p">,</span> <span class="mf">0.77</span><span class="p">],</span>             <span class="c1"># yellow
</span>    <span class="p">]</span>

    <span class="n">canvas</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">3</span><span class="p">)).</span><span class="n">astype</span><span class="p">(</span><span class="s">'uint8'</span><span class="p">)</span>
    <span class="n">canvas_copy</span> <span class="o">=</span> <span class="n">canvas</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">box</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">boxes</span><span class="p">):</span>
        <span class="n">cv2</span><span class="p">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">canvas</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">width</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">height</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">height</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">3</span><span class="p">])),</span>
                              <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">width</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">height</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">height</span> <span class="o">*</span> <span class="n">box</span><span class="p">[</span><span class="mi">3</span><span class="p">])),</span>
                              <span class="n">colorset</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>

    <span class="n">answer</span><span class="p">,</span> <span class="n">sorted_boxes</span><span class="p">,</span> <span class="n">sorted_index</span> <span class="o">=</span> <span class="n">nms</span><span class="p">(</span><span class="n">boxes</span><span class="p">,</span> <span class="n">iou_thres</span><span class="o">=</span><span class="mf">0.4</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">datum</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">sorted_boxes</span><span class="p">,</span> <span class="n">sorted_index</span><span class="p">)):</span>
        <span class="n">sbox</span><span class="p">,</span> <span class="n">sidx</span> <span class="o">=</span> <span class="n">datum</span>
        <span class="k">if</span> <span class="n">answer</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">cv2</span><span class="p">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">canvas_copy</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">width</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">height</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">height</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">3</span><span class="p">])),</span>
                                       <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">width</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">height</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">height</span> <span class="o">*</span> <span class="n">sbox</span><span class="p">[</span><span class="mi">3</span><span class="p">])),</span>
                                       <span class="n">colorset</span><span class="p">[</span><span class="n">sidx</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span>

    <span class="c1"># print(canvas)
</span>    <span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Before NMS"</span><span class="p">,</span> <span class="n">canvas</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"After NMS"</span><span class="p">,</span> <span class="n">canvas_copy</span><span class="p">)</span>

    <span class="n">cv2</span><span class="p">.</span><span class="n">imwrite</span><span class="p">(</span><span class="s">"before_nms.jpg"</span><span class="p">,</span> <span class="n">canvas</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="n">imwrite</span><span class="p">(</span><span class="s">"after_nms.jpg"</span><span class="p">,</span> <span class="n">canvas_copy</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>bolero2</name></author><category term="DeepLearning" /><summary type="html"><![CDATA[Object Detection에서 사용하는 NMS(Non-Maximum Suppression, 비 최대 억제 알고리즘)에 대해 알아보고, 간단한 코드를 작성하여 실습해봅니다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/thumbnail-nms.jpg" /><media:content medium="image" url="http://localhost:4000/img/thumbnail-nms.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[Paper] GA-Net: Guided Aggregation Net for End-to-end Stereo Matching</title><link href="http://localhost:4000/paper/2022/05/07/Paper-GA-Net-Guided-Aggregation-Net-for-End-to-end-Stereo-Matching/" rel="alternate" type="text/html" title="[Paper] GA-Net: Guided Aggregation Net for End-to-end Stereo Matching" /><published>2022-05-07T00:00:00+09:00</published><updated>2022-05-07T00:00:00+09:00</updated><id>http://localhost:4000/paper/2022/05/07/Paper-GA-Net-Guided-Aggregation-Net-for-End-to-end-Stereo-Matching</id><content type="html" xml:base="http://localhost:4000/paper/2022/05/07/Paper-GA-Net-Guided-Aggregation-Net-for-End-to-end-Stereo-Matching/"><![CDATA[<p><span class="tag  is-primary ">
    Paper
</span>
<span class="tag  is-primary ">
    DeepLearning
</span></p>

<h1 id="ga-net-guided-aggregation-net-for-end-to-end-stereo-matching">GA-Net: Guided Aggregation Net for End-to-end Stereo Matching</h1>

<p>이번에 소개할 논문은 2019년에 CVPR Oral 섹션에서 공개된
<strong>GA-Net</strong> 이라는 딥러닝 모델입니다.</p>

<p>2019년 당시에, RGB 이미지에서 Depth 이미지를 추정하는 <strong>Depth Estimation</strong>에 관한 연구가 활발히 진행되었습니다.</p>

<p>GA-Net은 Stereo 영상(양안)에서 Depth Image를 추정하는 딥러닝 네트워크입니다.</p>

<p>GA-Net은 그들만의 방법으로 Computing cost를 줄이고, 성능을 향상시키는 결과를 도출했습니다.</p>

<hr />

<h2 id="1-stereo-matching">1. Stereo Matching?</h2>
<ul>
  <li>Disparity Estimation</li>
  <li>각각 다른 시선에서 픽셀들을 매칭시키는 것.</li>
</ul>

<p><img src="https://velog.velcdn.com/images/bolero2/post/6e9cb1c3-067f-4e21-ab5a-b9e3a22d7516/image.png" alt="" /></p>

<hr />

<h2 id="2-contribution">2. Contribution</h2>

<p>1) 기존의 GC-Net의 경우, 3D stereo matching 연구에서 3D Conv를 사용</p>

<p>2) 이 3D conv는 고비용/높은 복잡도를 요구 → 연산 시 소요되는 시간이 길다.</p>

<p>3) 기존의 SGA(Semi-Global Aggregation)을 다른 방향으로 개선</p>

<p>4) 여기에 추가적으로 LGA(Local Guided Aggregation) 개발</p>

<p>5) <strong>SGA+LGA는 3D Conv를 대체 가능하고, 1/100 수준의 복잡도를 가진다.</strong></p>

<p>6) 15-20fps로 실시간 평가 및 대조 가능</p>

<hr />

<h2 id="3-improvement-of-sga">3. Improvement of SGA</h2>

<p>1) 기존의 SGA는 직접 조정(tuning)하기 힘든 사용자 설정 파라미터가 있음, 이 파라미터는 네트워크 학습 도중에 가변성이 매우 높다 → unstable 함.</p>

<p>2) SGM으로 픽셀 매칭 시 너무 다른 환경에 영향을 많이 받음.</p>

<p>3) 그래서 SGA를 세 방향으로 개선함.</p>
<blockquote>
  <p>3-1) 사용자 설정 파라미터를 학습 가능하게 변경(learnable)</p>

  <p>3-2) 첫 번째/외부 최소 선택을 가중치의 합으로 대체함, 기존 연구에서 strides는 max-pooling layer 대체해서 정확도 손실이 없음을 밝혔음.</p>

  <p>3-3) 내부/두 번째 최소 선택(selection)을 최대 선택으로 변경 → 본 모델의 학습하고자 하는 타겟은 매칭 코스트를 최소화하는 것 대신 ground truth의 예상 점수(confidence score와 비슷한 개념)를 최대화하는 것을 중점으로 보기 때문. (다시 말해서, 최대한 잘 맞추는 것에 집중함)</p>
</blockquote>

<hr />

<h2 id="4-lga">4. LGA</h2>

<p>→ 영상 내의 얇은 구조물과 객체의 가장자리(엣지)를 처리하기 위함.</p>

<hr />

<h2 id="5-architecture">5. Architecture</h2>

<ul>
  <li>3개의 SGA 레이어와 1개의 LGA 레이어 확인 가능.</li>
</ul>

<p><img src="https://velog.velcdn.com/images/bolero2/post/931c43c5-e1c5-43e5-86bc-b05eab33e412/image.png" alt="" /></p>

<hr />

<h2 id="6-experiment">6. Experiment</h2>

<ul>
  <li>실험 대상 데이터셋은 <strong>Scene Flow Dataset</strong>과 <strong>KITTI Benchmarks</strong> 를 사용함.</li>
</ul>

<p><img src="https://velog.velcdn.com/images/bolero2/post/bcfc97e0-f362-4d42-b902-62bd0950dc4d/image.png" alt="" /></p>

<hr />

<h2 id="7-sgm-vs-3d-convolution">7. SGM vs 3D Convolution</h2>

<ul>
  <li>빨간 선은 Ground Truth와 매칭 지점.</li>
</ul>

<p><img src="https://velog.velcdn.com/images/bolero2/post/d8ecd03f-8285-4c01-a240-52ad0c8cb910/image.png" alt="" /></p>

<ul>
  <li><strong>결론 : SGA + LGA 방식이 noise를 잘 잡음.</strong>
(<em>“The SGA layers successfully suppress these noise”</em>)</li>
</ul>

<hr />

<h2 id="8-traditional-sga-vs-ga-nets-sga">8. Traditional SGA vs GA-Net’s SGA</h2>

<p><img src="https://velog.velcdn.com/images/bolero2/post/95f13d3b-3a6d-47f8-8f59-e4cab925ffe4/image.png" alt="" /></p>

<hr />

<p><strong>(Paper Review는 제가 스스로 읽고 작성한 글이므로, 주관적인 내용임을 밝힙니다.)</strong></p>]]></content><author><name>bolero2</name></author><category term="Paper" /><summary type="html"><![CDATA[Semantic Segmentation에서 사용하는 라벨링 데이터에 대해 알아보고, 어떻게 제작할 수 있는지 알아봅니다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/thumbnail-ganet.png" /><media:content medium="image" url="http://localhost:4000/img/thumbnail-ganet.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[Paper] Better plain ViT baselines for ImageNet-1k</title><link href="http://localhost:4000/paper/2022/05/03/Paper-Better-plain-ViT-baselines-for-ImageNet-1k/" rel="alternate" type="text/html" title="[Paper] Better plain ViT baselines for ImageNet-1k" /><published>2022-05-03T00:00:00+09:00</published><updated>2022-05-03T00:00:00+09:00</updated><id>http://localhost:4000/paper/2022/05/03/Paper-Better-plain-ViT-baselines-for-ImageNet-1k</id><content type="html" xml:base="http://localhost:4000/paper/2022/05/03/Paper-Better-plain-ViT-baselines-for-ImageNet-1k/"><![CDATA[<p><span class="tag  is-primary ">
    Paper
</span>
<span class="tag  is-primary ">
    DeepLearning
</span>
<span class="tag  is-primary ">
    Transformer
</span>
<span class="tag  is-primary ">
    ImageClassification
</span></p>

<h1 id="better--plain-vit-baselines-for-imagenet-1k">Better  plain ViT baselines for ImageNet-1k</h1>

<p>이번에 소개할 논문은 5월 3일 <a href="https://paperswithcode.com">Paperswithcode</a>에 게재된
<strong>“<em>Better plain ViT baselines for ImageNet-1k</em>“</strong> 라는 논문입니다.
(논문 링크 : https://arxiv.org/pdf/2205.01580.pdf)</p>

<p>논문 자체가 3장으로 구성되어 있기 때문에, 읽기 편할 것입니다.</p>

<p>논문 제목에 나와있는 ViT 모델은 <strong>Image Classification</strong> task에서 사용되는 모델로써, NLP(Natural Language processing)에서 사용되는 Transformer 모듈을 Image task에 적용한 아주 유명한 모델입니다.</p>

<p>(ViT 이전에는 Convolution 연산이 Image Task의 독보적인 수단이었지만, ViT 이후로 Classification 뿐만 아니라 Object Detection(ex. DETR), Video Recognition 등에서도 Transformer 모듈이 활용될 정도로 ViT가 그 판도를 바꿔놓았습니다.)</p>

<p>기회가 되면 ViT 자체 논문과 Attention(name: Attention is all you need) 논문, BERT 논문에 대해서도 다뤄볼 예정입니다.</p>

<ul>
  <li><strong>ViT paper</strong> : <a href="https://arxiv.org/pdf/2010.11929.pdf">An Image Is Worth 16x16 Words: Transformers For Image Recognition At Scale</a></li>
  <li><strong>Attention paper</strong> : <a href="https://arxiv.org/pdf/1706.03762.pdf">Attention Is All You Need</a></li>
  <li><strong>BERT paper</strong> : <a href="https://arxiv.org/pdf/1810.04805.pdf">BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</a></li>
</ul>

<p>(본 블로그에 있는 <strong>DETR</strong> 요약 포스트 : <a href="https://velog.io/@bolero2/Paper-DETR-End-to-End-Object-Detection-with-Transformer">DETR - End-to-End Object Detection with Transformer</a>)</p>

<hr />

<h2 id="0-abstract">0. Abstract</h2>

<p>ViT는 Vision Transformer의 약자입니다. ViT의 발표 이후로 Image Classification 뿐만 아니라 다양한 Image 분야에서 Transformer 모듈을 적극 기용하고 있습니다.</p>

<p>ViT는 Image Classification 모델로써, 분류 라벨을 1000개나 가지고 있는 ImageNet 경진대회 (ILSVRC, ImageNet Large Scale Visual Recognition Challenge)에서 매우 우수한 성능을 보였습니다.</p>

<p>Vision Transformer 기술을 ImageNet-1k 경진대회에서 잘 쓰기 위해서는 _<strong>“sophisticated regularization”</strong>_이 있어야 하는데, 사실 이러한 것들 말고 일반적인 데이터 증대 기법(standard data augmentation)만으로도 놀라운 성능을 보여줄 수 있습니다.</p>

<p>본 논문에서는 일반적인 ViT 모델에서 몇 개의 수정을 통해 성능을 dramatical 하게 올렸습니다.</p>

<p>특히, 90epochs 만으로 top-1 accuracy가 76%를 넘었고, 300 epochs 까지 가는데 하루도 걸리지 않았습니다.</p>

<hr />

<h2 id="1-introduction">1. Introduction</h2>

<p>ImageNet 경진대회의 데이터셋 <strong><a href="https://image-net.org/index.php">ImageNet 데이터셋</a></strong>은 Image Classification 모델의 지표, 랭킹을 매기는데 굉장히 중요한 지표입니다. 대부분의 Classification 모델이 ImageNet 데이터셋을 사용하여 벤치마크 점수를 매기고, 랭킹을 매기게 됩니다.</p>

<p>ViT 모델에 대한 논문은 ImageNet과 같이 large-scale의 Dataset을 대상으로 하여, 잘 tuning된 ResNet보다 우월함을 보였습니다. ImageNet Dataset은 Classification 분야의 testbed(실험의 기준점) 역할을 하며, 이 데이터셋을 사용하는 모델은 여러 수정사항 없이 간단한 baseline의 코드를 사용하는 것(코드 자체를 보유한다는 의미?)이 꽤나 높은 이점이 될 수 있습니다.</p>

<p>본 논문은 <strong>introduction</strong> 단락에서 <em><code class="language-plaintext highlighter-rouge">big_vision</code></em> 이라는 것을 소개하고 있습니다. 이 <em><code class="language-plaintext highlighter-rouge">big_vision</code></em> 은 ViT를 포함하여 MLP-Mixer, LiT 등 vision transformer 모델을 baseline 적으로 가지고 있으며, 논문 자체적으로 baseline의 모델로 높은 성능을 보여줄 수 있었는지 기술하게 됩니다.</p>

<p><em><strong>요약하자면, “ImageNet Dataset을 타겟으로 하여 ViT의 baseline 모델에 충실하게 실험을 진행했다.”라고 말하고 싶은 것 같습니다. (이것은 big_vision에 코드가 탑재되어 있습니다.)</strong></em></p>

<p><em><strong>애초에 뒷부분을 보게 되면 모델 아키텍쳐의 변형이 이루어지지 않으며, batch_size 변경과 같은 아주 일반적이고 사소한 부분을 변형했습니다.</strong></em></p>

<p>단순함을 추구하는 논문으로 볼 수 있겠네요.</p>

<hr />

<h2 id="2-experimental-setup">2. Experimental setup</h2>

<p>실험(훈련 및 평가)은 전부 ImageNet 데이터셋을 타겟으로 삼았습니다.
실험에 대한 모델은 <code class="language-plaintext highlighter-rouge">ViT-S/16</code> 모델로 선정하였고, 만약 컴퓨팅 자원이 많이 남는 경우엔 <code class="language-plaintext highlighter-rouge">ViT-B/16</code>이나 <code class="language-plaintext highlighter-rouge">ViT-B/32</code>를 써도 된다고 합니다.</p>

<p>Transformer 모듈 사용시 이미지를 n 크기의 “patch”로 나누는 부분이 있는데, 이 patch를 늘리는 것은 Image의 해상도(resolution)를 줄이는 것과 동일합니다.
(ViT-B/16의 경우 patch 크기가 16이 되고, ViT-B/32의 경우 patch 크기가 32가 됩니다. 이러한 이유 때문에 patch 크기를 언급한 것 같네요.)</p>

<p>실험은 <a href="https://arxiv.org/pdf/1409.4842.pdf">Inception Crop</a>, random horizontal flip, random Augmentation 그리고 Mixup Augmentation을 사용하였습니다.</p>

<hr />

<h2 id="3-results">3. Results</h2>

<p><img src="https://velog.velcdn.com/images/bolero2/post/a8de228b-d957-4fc7-8547-fdb7fb0cc6da/image.png" alt="" /></p>

<p>Experimental setup 파트의 setup을 통해 학습한 결과,</p>

<p><strong>80%의 성능이 나오는 Epoch 300까지 21시간 40분밖에 걸리지 않았고
성능 또한 original <code class="language-plaintext highlighter-rouge">ViT</code>보다 2% 정도 더 높습니다.</strong></p>

<p><code class="language-plaintext highlighter-rouge">ResNet</code> original을 90 epoch 동안 학습시키고, improved ViT 역시 90 epoch 동안 학습시켰을 때는 성능이 1-2% 내외로 ResNet보다 더 높습니다.</p>

<p>기존의 ViT original 논문과 학습 부분에서 차이점을 둔 것은 다음과 같습니다:</p>
<blockquote>
  <ol>
    <li>batch_size를 4096에서 1024로 낮춤.</li>
    <li>class token 대신 GAP(Global Average Pooling) 사용.</li>
    <li>적은 수준의 Random Augmentation과 Mixup 사용.</li>
    <li>Position Embedding은 fixed 2D sin-cos 사용.</li>
  </ol>
</blockquote>

<p><em><strong>이렇게 ViT 모델에서 위와 같은 단순한 변경을 통해, 최종 300 Epoch에서 original <code class="language-plaintext highlighter-rouge">ViT-B/32</code> 모델 보다 약 6% 정도 성능 증가를 보였습니다.</strong></em></p>

<p><img src="https://velog.velcdn.com/images/bolero2/post/af5f0056-0088-4af9-8594-50df11402069/image.png" alt="" /></p>

<p>이 표를 보게 되면, original 보다 성능이 올라간 것은 확실한 사실입니다.
이 표에서 주목해야 할 부분은, <strong>위에서 언급한 4가지 변경점을 하나씩 제거해 보았을 때의 성능 결과입니다.</strong></p>

<p>가장 변경점이 적은 부분은 모델의 Head 부분을 MLP에서 linear로 변경하였을 때가 가장 성능 변화가 없었습니다. 그 외의 변경점은 1-2% 내외로 성능 하락이 존재합니다.</p>

<p>요약해보자면, <strong>“이렇게 단순한 baseline 모델에서 단순한 변경 사항들(batch_size 변경, GAP 추가, augmentation 기법 추가 등)을 사용함으로써 드라마틱한 성능 향상을 이루어낼 수 있다”</strong> 가 핵심이라고 볼 수 있겠습니다.</p>

<p>SAM(Sharpness Aware Minimization) 기법, CutMix, blurring, 고해상도에서의 파인 튜닝, 드롭아웃, 모델 구조 변경, stochastic depth와 같은 고급 기술(?)들은 하나도 적용하지 않았습니다.</p>

<hr />

<h2 id="5-conclusion">5. Conclusion</h2>

<p>항상 단순한 것을 추구하는 것은 가치있다고 하네요.</p>

<blockquote>
  <p>“It is always worth striving for simplicity.”</p>
</blockquote>

<hr />

<p><strong>(Paper Review는 제가 스스로 읽고 작성한 글이므로, 주관적인 내용임을 밝힙니다.)</strong></p>]]></content><author><name>bolero2</name></author><category term="Paper" /><summary type="html"><![CDATA[original ViT로부터 성능을 10%나 증가시킨 방법]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/thumbnail-Better_plain_ViT_baselines_for_ImageNet-1k.png" /><media:content medium="image" url="http://localhost:4000/img/thumbnail-Better_plain_ViT_baselines_for_ImageNet-1k.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[Android/Java] HttpURLConnection으로 HTTP POST request하기</title><link href="http://localhost:4000/android/2022/04/06/Android-HttpURLConnection-HTTP-POST-Request/" rel="alternate" type="text/html" title="[Android/Java] HttpURLConnection으로 HTTP POST request하기" /><published>2022-04-06T00:00:00+09:00</published><updated>2022-04-06T00:00:00+09:00</updated><id>http://localhost:4000/android/2022/04/06/Android-HttpURLConnection-HTTP-POST-Request</id><content type="html" xml:base="http://localhost:4000/android/2022/04/06/Android-HttpURLConnection-HTTP-POST-Request/"><![CDATA[<p><span class="tag  is-primary ">
    Android
</span>
<span class="tag  is-primary ">
    Java
</span></p>

<h2 id="0-intro">0. Intro</h2>

<p>필자 회사의 추론 서버(Inference Server)로 이미지를 <strong>POST</strong> 요청해서 응답을 받아오는
Android Application을 제작하게 되었다.</p>

<p>나는 Android 개발이란 걸 단 한번도 해본 적이 없었고,
Java 보다는 C++와 Python을 주로 썼었다.</p>

<p>그래서 그런지 굉장히 많은 삽질을 하며 장장 1주일에 걸쳐서 개발을 완료했는데,
나에게는 너무 어렵고 중요했던 정보였기에 블로그 포스팅을 하게 되었다.</p>

<hr />

<h2 id="1-before-development">1. Before Development</h2>

<p>우선, 어떠한 서버가 있고 거기에 AccessKey와 Image를 보내야 한다.
간단하게 Postman 으로 테스트를 해볼 수 있다.</p>

<p><img src="https://velog.velcdn.com/cloudflare/bolero2/2d07c10a-cfd3-49b2-a8ea-251bfe794aa1/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202022-04-06%2006.04.20.png" alt="" /></p>

<p>이렇게 POST method로 https://staging.server.com/api/inference/target 위치로</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">accessKey</span> <span class="o">=</span> <span class="s">"abcd12345"</span>
<span class="n">files</span> <span class="o">=</span> <span class="s">"bird.jpg"</span>
</code></pre></div></div>
<p>형식을 보내면 아래와 같이 응답이 온다.</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="nl">"image"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"fileName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"어쩌구_저쩌구_파일이름1.jpg"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"width"</span><span class="p">:</span><span class="w"> </span><span class="mi">2560</span><span class="p">,</span><span class="w">
            </span><span class="nl">"height"</span><span class="p">:</span><span class="w"> </span><span class="mi">1696</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"outputs"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
                </span><span class="nl">"softmax"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.9987636804580688</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="p">{</span><span class="w">
                </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
                </span><span class="nl">"softmax"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0012363195419311523</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>개발 전에, 알아야 할 정보는</p>
<blockquote>
  <ol>
    <li>어떤 Key 값을 보내야 하는가?</li>
    <li>각각의 Key에 매핑되는 Value 타입. (String? Image? Bitmap? 등)</li>
    <li>(당연하지만) POST 요청을 보낼 서버 주소</li>
    <li>헤더 정보</li>
  </ol>
</blockquote>

<p>등이 있다.</p>

<p>헤더 정보는 Request 요청을 보낼 때 어긋나게 되면
<strong>1. 요청이 잘못 가거나</strong> 혹은 <strong>2. 응답이 이상하게 올 수 있기</strong> 때문에 반드시 확인해야 한다.</p>

<p>그럼 헤더 정보는 어떻게 알 수 있을까?</p>

<hr />

<h2 id="2-checking-header-information">2. Checking header information</h2>

<p>사실 코드 작성보다 헤더 확인이라는 부분이 엄청 힘들었다.
나는 네트워크나 서버 개발을 해 본 적이 없어서, 헤더의 중요성을 몰랐는데 이번 기회에 뼈저리게 느꼈다.</p>

<p>Swagger 라든지, DevTools(개발자 도구, 요소 점검) 라든지, 어떠한 방식으로든 웹페이지에서 헤더 정보를 확인할 수 있다.
필자는 개발자 도구를 사용해서 웹페이지에서 직접 헤더를 확인하였다.</p>

<p><img src="https://velog.velcdn.com/cloudflare/bolero2/bd9a5013-08e5-4cf4-bb94-54a8d05c391e/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202022-04-06%2006.18.57.png" alt="회사 제품.jpg" /></p>

<p><strong>이렇게 개발자 도구를 열고, 네트워크 탭 - XHR/Fetch 항목으로 들어가면 [요청, 응답, 요청 데이터] 등을 확인할 수 있다.</strong>
그리고 저기의 Content-Type, Accept-Language 등이 우리가 Connection을 할 때 설정해야 할 헤더 및 Key 정보들이다.</p>

<p>아래로 더 내리면 요청 데이터 항목이 있다.
<img src="https://velog.velcdn.com/cloudflare/bolero2/1b1a7fd0-d4ee-4fe7-9e5d-fb74af163c35/image.png" alt="" /></p>

<p>유형은 <code class="language-plaintext highlighter-rouge">multipart/form-data</code> 이고, boundary는 <code class="language-plaintext highlighter-rouge">----WebKitFormBoundaryAYuewg7muT6zRKkc</code> 이다.</p>

<p>나는 boundary가 뭔지 엄청 헷갈렸는데, 쉽게 생각해서 “구분자” 라고 보면 된다.</p>

<p>POST로 데이터를 보내면, key-value pair가 1개든 10개든 하나의 String 타입으로 보낸다.
그러면 각 key-value pair를 구분할 수 있어야 하는데, boundary가 그 역할을 하게 된다.</p>

<p>개발자 도구에서 요청 데이터를 직접 볼 수 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>------WebKitFormBoundaryAYuewg7muT6zRKkc
Content-Disposition: form-data; name="files"; filename="bird.jpg"
Content-Type: image/jpeg


------WebKitFormBoundaryAYuewg7muT6zRKkc--

</code></pre></div></div>
<p>이렇게, <strong>two-hypens</strong>(“–“)과 <strong>줄바꿈</strong>(=crlf, Java에서는 “\r\n”을 쓴다.), <strong>boundary</strong>의 조합으로 볼 수 있다.</p>

<p>1개의 데이터가 아니라 여러 개의 image data를 보냈을 때의 요청 데이터는 어떨까?</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>------WebKitFormBoundary3d92ZiPrZIV3SDAy
Content-Disposition: form-data; name="files"; filename="bird1.jpg"
Content-Type: image/jpeg


------WebKitFormBoundary3d92ZiPrZIV3SDAy
Content-Disposition: form-data; name="files"; filename="cat1.jpg"
Content-Type: image/jpeg


------WebKitFormBoundary3d92ZiPrZIV3SDAy
Content-Disposition: form-data; name="files"; filename="deer1.jpg"
Content-Type: image/jpeg


------WebKitFormBoundary3d92ZiPrZIV3SDAy
Content-Disposition: form-data; name="files"; filename="dog1.jpg"
Content-Type: image/jpeg


------WebKitFormBoundary3d92ZiPrZIV3SDAy--

</code></pre></div></div>
<p>이렇게 나타난다. <strong>우리가 Android 개발 시에 POST 데이터를 보내줄 때, 이러한 형식을 맞춰야 한다.</strong></p>

<p>(보통 boundary는 웹 페이지에서 알아서 보내준다고 한다.
개발자가 임의로 작성해도 된다고 하지만, 필자는 웹페이지의 형식을 복사 붙여넣기 하였다.)</p>

<hr />

<h2 id="3-development">3. Development</h2>

<p>이제 실제 코드부분을 작성해보자.</p>

<h3 id="3-1-pre-setting">3-1. pre-setting</h3>
<p>작동 방식은 다음과 같다:</p>

<ol>
  <li>Load Image 버튼으로 ImageView에 이미지를 띄우고</li>
  <li>Send To Server 버튼으로 해당 이미지를 서버로 전송한다.</li>
</ol>

<p>화면 구성은 다음과 같다:
<img src="https://velog.velcdn.com/cloudflare/bolero2/03bd1748-a0df-43a5-907c-393a27385be9/flow1.jpg" alt="" /></p>

<p>버튼 및 String, ImageView, TextView 관련해서는 이후에 포스팅을 하고,
지금은 Http Request가 목적이므로 생략한다.</p>

<p>우선, STORAGE 및 Network permission을 적어줘야 한다.
<code class="language-plaintext highlighter-rouge">app/manifests/AndroidManifest.xml</code> 위치에 적는다.</p>

<ul>
  <li><strong>AndroidManifest.xml</strong>
```xml</li>
</ul>
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.demoandroidapp">
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.INTERNET" />
</manifest>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>외부 Class는 사용하는 것이 없기 때문에, `build.gradle` 에는 수정할 것이 없다.

### 3-2. MainActivity

간단하게 MainActivity의 OnCreate 및 OnCreate 하위 buttonLoadImage.setOnClickListener 함수 코드만 보자.

- **MainActivity.class**
```java
import androidx.appcompat.app.AppCompatActivity;
import android.annotation.SuppressLint;
import android.content.Intent;
import android.database.Cursor;
import android.os.AsyncTask;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import java.io.ByteArrayOutputStream;
import org.json.JSONArray;
import org.json.JSONObject;

public class MainActivity extends AppCompatActivity {
    private static final int RESULT_LOAD_IMAGE = 1;
    private static String output = "";
    private TextView resultTextView = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // declaration button
        Button buttonLoadImage = (Button) findViewById(R.id.button);
        Button buttonSendToServer = (Button) findViewById(R.id.detect);
        resultTextView = findViewById(R.id.resultText);

        // permission
        requestPermissions(new String[]{android.Manifest.permission.READ_EXTERNAL_STORAGE}, 1);

        // Declaration TextView, ImageView, initialization resultTextView

        TextView NothingToShowTextView = findViewById(R.id.nothingToShowText);
        ImageView imageView = (ImageView) findViewById(R.id.image);
        resultTextView.setText("");

        buttonLoadImage.setOnClickListener(new View.OnClickListener() {

            @SuppressLint("SetTextI18n")
            @Override
            public void onClick(View arg0) {
                // reset TextView
                NothingToShowTextView.setText("");
                Intent i = new Intent(
                        Intent.ACTION_PICK,
                        MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                startActivityForResult(i, RESULT_LOAD_IMAGE);
            }
        });
</code></pre></div></div>

<p>그리고 OnCreate 내부에 이어서 <code class="language-plaintext highlighter-rouge">buttonSendToServer.setOnClickListener</code> 를 작성한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buttonSendToServer</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">View</span><span class="o">.</span><span class="na">OnClickListener</span><span class="o">()</span> <span class="o">{</span>

    <span class="nd">@SuppressLint</span><span class="o">(</span><span class="s">"SetTextI18n"</span><span class="o">)</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="nc">View</span> <span class="n">arg0</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Bitmap</span> <span class="n">original_bitmap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="nc">String</span> <span class="n">url_string</span> <span class="o">=</span> <span class="s">"https://staging.server.com/api/inference/target"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">accessKey_string</span> <span class="o">=</span> <span class="s">"abcd12345"</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">resultTextView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"Inference in progress..."</span><span class="o">);</span>

            <span class="c1">// Getting the image from the image view</span>
            <span class="c1">// [1] Read the image as Bitmap</span>
            <span class="n">original_bitmap</span> <span class="o">=</span> <span class="o">((</span><span class="nc">BitmapDrawable</span><span class="o">)</span> <span class="n">imageView</span><span class="o">.</span><span class="na">getDrawable</span><span class="o">()).</span><span class="na">getBitmap</span><span class="o">();</span>

            <span class="nc">ByteArrayOutputStream</span> <span class="n">blob</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ByteArrayOutputStream</span><span class="o">();</span>
            <span class="n">original_bitmap</span><span class="o">.</span><span class="na">compress</span><span class="o">(</span><span class="nc">Bitmap</span><span class="o">.</span><span class="na">CompressFormat</span><span class="o">.</span><span class="na">JPEG</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="n">blob</span><span class="o">);</span>
            <span class="kt">byte</span><span class="o">[]</span> <span class="n">imageBytes</span> <span class="o">=</span> <span class="n">blob</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>

            <span class="c1">// [2] http connection</span>
            <span class="nc">NetworkTask</span> <span class="n">networkTask</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NetworkTask</span><span class="o">(</span><span class="n">url_string</span><span class="o">,</span>
                                                      <span class="n">accessKey_string</span><span class="o">,</span>
                                                      <span class="n">imageBytes</span><span class="o">,</span>
                                                      <span class="n">resultTextView</span><span class="o">);</span>
            <span class="n">networkTask</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Failed to open image file."</span><span class="o">);</span>
            <span class="n">finish</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="n">imageView</span><span class="o">.</span><span class="na">setImageDrawable</span><span class="o">(</span><span class="k">new</span> <span class="nc">BitmapDrawable</span><span class="o">(</span><span class="n">getResources</span><span class="o">(),</span> <span class="n">original_bitmap</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">});</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">String url_string</code> 에는 Postman에서 봤던 <code class="language-plaintext highlighter-rouge">"https://staging.server.com/api/inference/target"</code> 을 적고, 
<code class="language-plaintext highlighter-rouge">String accessKey_string</code> 에는 <code class="language-plaintext highlighter-rouge">"abcd12345"</code> 를 적어준다.</p>

<p>여기서 핵심은 2가지이다.</p>
<blockquote>
  <ol>
    <li>Bitmap 타입의 이미지를 byte[] 타입으로 변환한다.</li>
    <li>AsyncTask 를 상속받은 NetworkTask를 execute() 한다.</li>
  </ol>
</blockquote>

<p>byte[] 형태로 변환하는 것은, <strong>ImageView에서 이미지를 읽어서(bitmap) &gt; toByteArray();를 적용하는 것</strong>이다.</p>

<h3 id="3-3-networktask">3-3. NetworkTask</h3>

<p>NetworkTask는 다음과 같이 작성했다:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">NetworkTask</span> <span class="kd">extends</span> <span class="nc">AsyncTask</span><span class="o">&lt;</span><span class="nc">Void</span><span class="o">,</span> <span class="nc">Void</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="cm">/**
     * AsyncTask start
     *
     * (single Worker Thread)
     * 1. onPreExecuted()
     * 2. doInBackground()
     *      - publishProgress() -&gt; onProgressUpdate()
     *      - publishProgress() -&gt; onProgressUpdate()
     *      - ...
     * 3. onPostExecuted()
     *
     */</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">url</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">accessKey</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">values</span><span class="o">;</span>
    <span class="nd">@SuppressLint</span><span class="o">(</span><span class="s">"StaticFieldLeak"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TextView</span> <span class="n">_resultView</span><span class="o">;</span>

    <span class="c1">// Constructor</span>
    <span class="kd">public</span> <span class="nf">NetworkTask</span><span class="o">(</span><span class="nc">String</span> <span class="n">url</span><span class="o">,</span> <span class="nc">String</span> <span class="n">accessKey</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">values</span><span class="o">,</span> <span class="nc">TextView</span> <span class="n">resultView</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">url</span> <span class="o">=</span> <span class="n">url</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">accessKey</span> <span class="o">=</span> <span class="n">accessKey</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">values</span> <span class="o">=</span> <span class="n">values</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">_resultView</span> <span class="o">=</span> <span class="n">resultView</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="nc">Void</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">result</span><span class="o">;</span> <span class="c1">// 요청 결과를 저장할 변수.</span>
        <span class="nc">RequestHttpsURLConnection</span> <span class="n">requestHttpsURLConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RequestHttpsURLConnection</span><span class="o">();</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">requestHttpsURLConnection</span><span class="o">.</span><span class="na">request</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">accessKey</span><span class="o">,</span> <span class="n">values</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[doInBackground] output : "</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[doInBackground] output is null state."</span><span class="o">);</span>
            <span class="o">}</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@SuppressLint</span><span class="o">(</span><span class="s">"SetTextI18n"</span><span class="o">)</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="nc">String</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onPostExecute</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">outputs</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">image</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

        <span class="kt">double</span> <span class="n">maxSoftmax</span> <span class="o">=</span> <span class="mf">0.0</span><span class="no">F</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

        <span class="nc">String</span> <span class="n">labelName</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">JSONArray</span> <span class="n">jsonArray</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JSONArray</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>

                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">jsonArray</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="nc">JSONObject</span> <span class="n">tempJsonObject</span> <span class="o">=</span> <span class="n">jsonArray</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                    <span class="n">image</span> <span class="o">=</span> <span class="n">tempJsonObject</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"image"</span><span class="o">);</span>
                    <span class="n">outputs</span> <span class="o">=</span> <span class="n">tempJsonObject</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"outputs"</span><span class="o">);</span>

                    <span class="nc">JSONArray</span> <span class="n">jsonOutputsArray</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JSONArray</span><span class="o">(</span><span class="n">outputs</span><span class="o">);</span>

                    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">jsonOutputsArray</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                        <span class="nc">JSONObject</span> <span class="n">tempOutputsJsonObject</span> <span class="o">=</span> <span class="n">jsonOutputsArray</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
                        <span class="n">labelName</span> <span class="o">=</span> <span class="n">tempOutputsJsonObject</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"label"</span><span class="o">);</span>
                        <span class="kt">double</span> <span class="n">tempSoftmaxValue</span> <span class="o">=</span> <span class="n">tempOutputsJsonObject</span><span class="o">.</span><span class="na">getDouble</span><span class="o">(</span><span class="s">"softmax"</span><span class="o">);</span>

                        <span class="k">if</span> <span class="o">(</span><span class="n">maxSoftmax</span> <span class="o">&lt;</span> <span class="n">tempSoftmaxValue</span><span class="o">)</span> <span class="o">{</span>
                            <span class="n">maxSoftmax</span> <span class="o">=</span> <span class="n">tempSoftmaxValue</span><span class="o">;</span>
                            <span class="k">switch</span> <span class="o">(</span><span class="n">labelName</span><span class="o">)</span> <span class="o">{</span>
                                <span class="k">case</span> <span class="s">"0"</span><span class="o">:</span>
                                    <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"bird"</span><span class="o">;</span>
                                    <span class="k">break</span><span class="o">;</span>
                                <span class="k">case</span> <span class="s">"1"</span><span class="o">:</span>
                                    <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"cat"</span><span class="o">;</span>
                                    <span class="k">break</span><span class="o">;</span>
                                <span class="k">case</span> <span class="s">"2"</span><span class="o">:</span>
                                    <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"deer"</span><span class="o">;</span>
                                    <span class="k">break</span><span class="o">;</span>
                                <span class="k">case</span> <span class="s">"3"</span><span class="o">:</span>
                                    <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"dog"</span><span class="o">;</span>
                                    <span class="k">break</span><span class="o">;</span>
                                <span class="k">case</span> <span class="s">"4"</span><span class="o">:</span>
                                    <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"frog"</span><span class="o">;</span>
                                    <span class="k">break</span><span class="o">;</span>
                                <span class="k">case</span> <span class="s">"5"</span><span class="o">:</span>
                                    <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"horse"</span><span class="o">;</span>
                                    <span class="k">break</span><span class="o">;</span>
                            <span class="o">}</span>
                        <span class="o">}</span>

                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[onPostExecute] output is null state."</span><span class="o">);</span>
            <span class="o">}</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="n">_resultView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"Result : ["</span> <span class="o">+</span> <span class="n">maxLabelName</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>AsyncTask는 Http Connection을 위해서 <strong>반드시</strong> 상속받아야 된다고 한다.
(Android 실행의 main thread에서 network connection 동작을 하지 않는다고 한다.)</p>

<p>AsyncTask의 동작 방식은</p>
<blockquote>
  <ol>
    <li>AsyncTask start</li>
    <li><strong>onPreExecuted()</strong></li>
    <li><strong>doInBackground()</strong>
      <ul>
        <li>publishProgress() -&gt; onProgressUpdate()</li>
        <li>publishProgress() -&gt; onProgressUpdate()</li>
        <li>…</li>
      </ul>
    </li>
    <li><strong>onPostExecuted()</strong></li>
  </ol>
</blockquote>

<p>순서이다.</p>

<p>doInBackground() 이후에 onPostExecuted() 함수가 수행되는데,</p>

<p>doInBackground 함수의 return type이 <strong>String</strong> 이므로,
onPostExecuted() 함수의 입력 파라미터의 type 역시 <strong>String</strong> 이 된다.</p>

<p>doInBackground 에서 실제 POST request를 날리고, onPostExecuted 에서 POST response String에 대한 후처리가 이루어진다. (화면에 결과값 띄워주기 등)</p>

<p>실제 동작은 <strong>doInBackground()</strong> 함수 내부 중간의</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">RequestHttpsURLConnection</span> <span class="n">requestHttpsURLConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RequestHttpsURLConnection</span><span class="o">();</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">requestHttpsURLConnection</span><span class="o">.</span><span class="na">request</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="n">accessKey</span><span class="o">,</span> <span class="n">values</span><span class="o">);</span> <span class="c1">// 해당 URL로 부터 결과물을 얻어온다.</span>
</code></pre></div></div>
<p>부분에서 POST request를 날리게 된다.
생성자 파라미터는 없고, <code class="language-plaintext highlighter-rouge">request</code> 함수의 파라미터는:</p>
<blockquote>
  <ol>
    <li><strong>url</strong> : API Endpoint</li>
    <li><strong>accessKey</strong> : key[‘accessKey’]</li>
    <li><strong>values</strong> : key[‘files’] (byte[] type.)</li>
  </ol>
</blockquote>

<p>이렇게 3개로 설정하였다.</p>

<p>그러면 이제 핵심 부분인 <code class="language-plaintext highlighter-rouge">RequestHttpsURLConnection</code> class 코드를 보자.</p>

<h3 id="3-4-requesthttpsurlconnection">3-4. RequestHttpsURLConnection</h3>

<ul>
  <li><strong>RequestHttpsURLConnection.class 전체 코드</strong>
```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.DataOutputStream;
import javax.net.ssl.HttpsURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;</li>
</ul>

<p>public class RequestHttpsURLConnection {
    String strResponse = null;
    public String request(String _url, String accessKey, byte[] imageBytes){</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    // HttpURLConnection 참조 변수.
    HttpsURLConnection urlConn = null;

    try{
        String crlf = "\r\n";     // carriage return + line feed
        String twoHyphens = "--";
        String boundary = "----WebKitFormBoundarynuXSuFo6d9f2xtbb";

        URL url = new URL(_url);
        urlConn = (HttpsURLConnection) url.openConnection();

        // [2-1]. urlConn 설정.
        urlConn.setRequestMethod("POST"); // URL 요청에 대한 메소드 설정 : POST.
        urlConn.setRequestProperty("USER-AGENT", "Mozilla/5.0");
        urlConn.setRequestProperty("ACCEPT-LANGUAGE", "en-us,en;0.5");
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setUseCaches(false);

        urlConn.setRequestProperty("Connection", "keep-alive");
        urlConn.setRequestProperty("User-Agent", "CodeJava Agent");
        urlConn.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);

        // [2-2]. parameter 전달 및 데이터 읽어오기.
        DataOutputStream request = new DataOutputStream(urlConn.getOutputStream());

        // Write key and values
        // 1. Access Key
        request.writeBytes(twoHyphens + boundary + crlf);
        request.writeBytes("Content-Disposition: form-data; name=\"accessKey\"" + crlf);
        request.writeBytes("Content-Type: application/json" + crlf);
        request.writeBytes(crlf);
        request.writeBytes(accessKey + crlf);

        // 2. Image data
        request.writeBytes(twoHyphens + boundary + crlf);
        request.writeBytes("Content-Disposition: form-data; name=\"files\"; filename=\"elephants1.png\"" + crlf);
        request.writeBytes("Content-Type: image/jpeg" + crlf);
        request.writeBytes(crlf);
        request.write(imageBytes);

        request.writeBytes(crlf);
        request.writeBytes(twoHyphens + boundary + twoHyphens + crlf);
        request.flush();
        request.close();

        int response_code = urlConn.getResponseCode();
        System.out.println("Connection response code : [" + response_code + "]");

        // [2-3]. 연결 요청 확인.
        // 실패 시 null을 리턴하고 메서드를 종료.
        if (response_code != HttpsURLConnection.HTTP_OK){
            return "Response Code : " + Integer.toString(response_code);	// response 200
        } else {
            InputStream responseStream = new BufferedInputStream(urlConn.getInputStream());
            BufferedReader responseStreamReader = new BufferedReader(new InputStreamReader(responseStream, StandardCharsets.UTF_8));

            String outputResponse = "";
            StringBuilder stringBuilder = new StringBuilder();

            while ((outputResponse = responseStreamReader.readLine()) != null) {
                stringBuilder.append(outputResponse).append("\n");
            }

            responseStreamReader.close();
            strResponse = stringBuilder.toString();

            return strResponse;
        }
    } catch (IOException e) {   // for URL.
        e.printStackTrace();
    }                           // for openConnection().
    finally {
        if (urlConn != null)
            urlConn.disconnect();
    }
    return null;
} } ```
</code></pre></div></div>

<p>달랑 request 함수 하나만 구현하였다. 이제부터는 각 구성 별 코드 블럭에 대한 설명과 참고사항들이다.</p>

<hr />

<p><em><strong>1. 우리가 아까 헤더 정보 찾기에서 봤었던 boundary와, crlf(줄바꿈), two-hypens 변수를 할당한다.</strong></em></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">crlf</span> <span class="o">=</span> <span class="s">"\r\n"</span><span class="o">;</span>     <span class="c1">// carriage return + line feed</span>
<span class="nc">String</span> <span class="n">twoHyphens</span> <span class="o">=</span> <span class="s">"--"</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">boundary</span> <span class="o">=</span> <span class="s">"----WebKitFormBoundarynuXSuFo6d9f2xtbb"</span><span class="o">;</span>
</code></pre></div></div>
<p>boundary는 임의로 설정 가능하다고 하지만, 웹알못인 필자는 잘 몰라서 browser에서 보여준 것을 썼다.</p>

<hr />

<p><em><strong>2. URL 객체를 만들고, Connection을 활성화한다.</strong></em></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="no">URL</span><span class="o">(</span><span class="n">_url</span><span class="o">);</span>
<span class="n">urlConn</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpsURLConnection</span><span class="o">)</span> <span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">();</span>
</code></pre></div></div>

<hr />

<p><em><strong>3. 헤더 정보를 입력한다.</strong></em></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">urlConn</span><span class="o">.</span><span class="na">setRequestMethod</span><span class="o">(</span><span class="s">"POST"</span><span class="o">);</span> <span class="c1">// URL 요청에 대한 메소드 설정 : POST.</span>
<span class="n">urlConn</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">"USER-AGENT"</span><span class="o">,</span> <span class="s">"Mozilla/5.0"</span><span class="o">);</span>
<span class="n">urlConn</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">"ACCEPT-LANGUAGE"</span><span class="o">,</span> <span class="s">"en-us,en;0.5"</span><span class="o">);</span>
<span class="n">urlConn</span><span class="o">.</span><span class="na">setDoInput</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">urlConn</span><span class="o">.</span><span class="na">setDoOutput</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="n">urlConn</span><span class="o">.</span><span class="na">setUseCaches</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>

<span class="n">urlConn</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">"Connection"</span><span class="o">,</span> <span class="s">"keep-alive"</span><span class="o">);</span>
<span class="n">urlConn</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">"User-Agent"</span><span class="o">,</span> <span class="s">"CodeJava Agent"</span><span class="o">);</span>
<span class="n">urlConn</span><span class="o">.</span><span class="na">setRequestProperty</span><span class="o">(</span><span class="s">"Content-Type"</span><span class="o">,</span> <span class="s">"multipart/form-data; boundary="</span> <span class="o">+</span> <span class="n">boundary</span><span class="o">);</span>
</code></pre></div></div>
<p>이전에 web-browser에서 살펴 본 헤더 정보들이다. 
Content-Type은 <code class="language-plaintext highlighter-rouge">"multipart/form-data"</code> 형식이고, <code class="language-plaintext highlighter-rouge">;</code> 이후에 boundary 정보를 위와 같이 넣어주면 된다.</p>

<p>또한, POST method이므로 <code class="language-plaintext highlighter-rouge">urlConn.setRequestMethod()</code> 의 파라미터로 _<strong>“POST”</strong>_를 넣어주었다.</p>

<p>이 외에</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">"USER-AGENT"</code> : web browser에서 확인 가능.
<code class="language-plaintext highlighter-rouge">"ACCEPT-LANGUAGE"</code> : <em><strong>“en-us,en;0.5”</strong></em> 로 고정해줬다.
<code class="language-plaintext highlighter-rouge">"Connection"</code> : web browser에서 확인 가능.
<code class="language-plaintext highlighter-rouge">"User-Agent"</code> : <em><strong>“CodeJava Agent”</strong></em> 로 고정해줬다.</p>

  <p><code class="language-plaintext highlighter-rouge">urlConn.setDoInput(true)</code>
<code class="language-plaintext highlighter-rouge">urlConn.setDoOutput(true)</code>
<code class="language-plaintext highlighter-rouge">urlConn.setUseCaches(false)</code> : 위 3개는 true / true / false 로 고정해주었다.</p>
</blockquote>

<p>등을 적어준다.</p>

<hr />

<p><em><strong>4. form-data를 입력한다.</strong></em></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">DataOutputStream</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DataOutputStream</span><span class="o">(</span><span class="n">urlConn</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">());</span>

<span class="c1">// Write key and values</span>
<span class="c1">// 1. Access Key</span>
<span class="n">request</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="n">twoHyphens</span> <span class="o">+</span> <span class="n">boundary</span> <span class="o">+</span> <span class="n">crlf</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="s">"Content-Disposition: form-data; name=\"accessKey\""</span> <span class="o">+</span> <span class="n">crlf</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="s">"Content-Type: application/json"</span> <span class="o">+</span> <span class="n">crlf</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="n">crlf</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="n">accessKey</span> <span class="o">+</span> <span class="n">crlf</span><span class="o">);</span>

<span class="c1">// 2. Image data</span>
<span class="n">request</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="n">twoHyphens</span> <span class="o">+</span> <span class="n">boundary</span> <span class="o">+</span> <span class="n">crlf</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="s">"Content-Disposition: form-data; name=\"files\"; filename=\"anything.png\""</span> <span class="o">+</span> <span class="n">crlf</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="s">"Content-Type: image/jpeg"</span> <span class="o">+</span> <span class="n">crlf</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="n">crlf</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">imageBytes</span><span class="o">);</span>

<span class="n">request</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="n">crlf</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">writeBytes</span><span class="o">(</span><span class="n">twoHyphens</span> <span class="o">+</span> <span class="n">boundary</span> <span class="o">+</span> <span class="n">twoHyphens</span> <span class="o">+</span> <span class="n">crlf</span><span class="o">);</span>
<span class="n">request</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
<span class="n">request</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</code></pre></div></div>

<p>사실상 이번 개발에서 <strong>가장</strong> 중요한 부분이다.
나는 이런 request를 처음보내서, 3일을 헤맸었다.</p>

<p><strong>실제 request를 보낼 데이터들의 명세서(?)를 적어주는 부분이다.</strong>
아까 요청 데이터 항목에서 봤었던</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>------WebKitFormBoundaryAYuewg7muT6zRKkc (+ crlf)
Content-Disposition: form-data; name="files"; filename="bird.jpg" (+ crlf)
Content-Type: image/jpeg (+ crlf)
(+ crlf)
(+ crlf)
------WebKitFormBoundaryAYuewg7muT6zRKkc-- (+ crlf)
(+ crlf)
</code></pre></div></div>
<p>이 부분을 적어주는 것이다.</p>

<ul>
  <li>항상 시작은 twoHypens + boundary + crlf로 시작한다.</li>
  <li>Content-Disposition 을 적어준다. 문자열이므로 웹페이지에서 보이는 그대로 적어주면 된다. <strong>crlf 를 붙인다.</strong></li>
  <li>Content-Type 을 적어준다. <strong>crlf 를 붙인다.</strong></li>
  <li><strong>crlf 를 붙인다.</strong></li>
  <li><em>실제로 보낼(POST) 데이터를 적어준다.</em>
    <ul>
      <li><strong>String 일 경우</strong> : request.writeBytes()</li>
      <li><strong>byte[] (image)일 경우</strong> : request.write()</li>
    </ul>
  </li>
  <li><strong>crlf 를 붙인다.</strong></li>
  <li>항상 마지막은 twoHypens + boundary + twoHypens + crlf 로 마무리한다.</li>
  <li>더 이상 보낼 데이터가 없으면 : <code class="language-plaintext highlighter-rouge">request.flush()</code> 및 <code class="language-plaintext highlighter-rouge">request.close()</code> 로 POST를 종료한다.</li>
</ul>

<p>이렇게 하면 실제 API Endpoint 서버에 POST 동작이 수행된다.</p>

<hr />

<p><em><strong>5. 응답 코드(Response Code) 및 응답 문자열을 확인한다.</strong></em></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">response_code</span> <span class="o">=</span> <span class="n">urlConn</span><span class="o">.</span><span class="na">getResponseCode</span><span class="o">();</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Connection response code : ["</span> <span class="o">+</span> <span class="n">response_code</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>

<span class="c1">// [2-3]. 연결 요청 확인.</span>
<span class="k">if</span> <span class="o">(</span><span class="n">response_code</span> <span class="o">!=</span> <span class="nc">HttpsURLConnection</span><span class="o">.</span><span class="na">HTTP_OK</span><span class="o">){</span>
    <span class="k">return</span> <span class="s">"Response Code : "</span> <span class="o">+</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">response_code</span><span class="o">);</span>	<span class="c1">// response 200</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="nc">InputStream</span> <span class="n">responseStream</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedInputStream</span><span class="o">(</span><span class="n">urlConn</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">());</span>
    <span class="nc">BufferedReader</span> <span class="n">responseStreamReader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">responseStream</span><span class="o">,</span> <span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>

    <span class="nc">String</span> <span class="n">outputResponse</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
    <span class="nc">StringBuilder</span> <span class="n">stringBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

    <span class="k">while</span> <span class="o">((</span><span class="n">outputResponse</span> <span class="o">=</span> <span class="n">responseStreamReader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">stringBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">outputResponse</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="n">responseStreamReader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="n">strResponse</span> <span class="o">=</span> <span class="n">stringBuilder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>

    <span class="k">return</span> <span class="n">strResponse</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>응답은 <code class="language-plaintext highlighter-rouge">InputStream</code> 과 <code class="language-plaintext highlighter-rouge">BufferedReader</code> 클래스에서 수행한다.
<code class="language-plaintext highlighter-rouge">BufferedReader</code> 클래스의 객체가 <code class="language-plaintext highlighter-rouge">InputStream</code> 클래스의 객체를 받는데, 이 <code class="language-plaintext highlighter-rouge">InputStream</code> 의 객체는 <code class="language-plaintext highlighter-rouge">urlConn.getInputStream()</code> 을 파라미터로 받는다.</p>

<p>(사실 response 부분은 아마 전 세계의 android http connection 모든 코드에서 동일하게 적용될 것이다.)</p>

<p>이렇게 해서, endline까지 while문으로 <code class="language-plaintext highlighter-rouge">readline()</code> 을 수행하여 <code class="language-plaintext highlighter-rouge">StringBuilder</code> 객체에 결과 문자열을 저장한다.</p>

<p>이렇게 나온 response 문자열은, 아까 <strong>MainActivity.class</strong> 소스 코드의 NetworkTask 클래스 내부
<code class="language-plaintext highlighter-rouge">result = requestHttpsURLConnection.request(url, accessKey, values);</code>
result 변수에 저장된다.</p>

<hr />

<h2 id="4-finish">4. Finish</h2>

<p>거의 다 왔다.</p>

<p>챕터 3의 <code class="language-plaintext highlighter-rouge">request</code> 함수는 <code class="language-plaintext highlighter-rouge">doInBackground</code>에서 수행되었고,
request 의 결과는 <code class="language-plaintext highlighter-rouge">doInBackground</code> 함수 내부의 <code class="language-plaintext highlighter-rouge">result</code> 변수에 저장되었으며,
해당 <code class="language-plaintext highlighter-rouge">result</code> 변수를 return 하면 <code class="language-plaintext highlighter-rouge">onPostExecuted</code> 함수에서 result 변수의 값을 받아올 수 있다.
(이건 정해진 구조이다.)</p>

<p>그러면 이제 <code class="language-plaintext highlighter-rouge">onPostExecuted()</code> 함수를 다시 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="nc">String</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">onPostExecute</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
    <span class="nc">String</span> <span class="n">outputs</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">image</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

    <span class="kt">double</span> <span class="n">maxSoftmax</span> <span class="o">=</span> <span class="mf">0.0</span><span class="no">F</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

    <span class="nc">String</span> <span class="n">labelName</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">JSONArray</span> <span class="n">jsonArray</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JSONArray</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">jsonArray</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">JSONObject</span> <span class="n">tempJsonObject</span> <span class="o">=</span> <span class="n">jsonArray</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="n">image</span> <span class="o">=</span> <span class="n">tempJsonObject</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"image"</span><span class="o">);</span>
                <span class="n">outputs</span> <span class="o">=</span> <span class="n">tempJsonObject</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"outputs"</span><span class="o">);</span>

                <span class="nc">JSONArray</span> <span class="n">jsonOutputsArray</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JSONArray</span><span class="o">(</span><span class="n">outputs</span><span class="o">);</span>

                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">jsonOutputsArray</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="nc">JSONObject</span> <span class="n">tempOutputsJsonObject</span> <span class="o">=</span> <span class="n">jsonOutputsArray</span><span class="o">.</span><span class="na">getJSONObject</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
                    <span class="n">labelName</span> <span class="o">=</span> <span class="n">tempOutputsJsonObject</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"label"</span><span class="o">);</span>
                    <span class="kt">double</span> <span class="n">tempSoftmaxValue</span> <span class="o">=</span> <span class="n">tempOutputsJsonObject</span><span class="o">.</span><span class="na">getDouble</span><span class="o">(</span><span class="s">"softmax"</span><span class="o">);</span>

                    <span class="k">if</span> <span class="o">(</span><span class="n">maxSoftmax</span> <span class="o">&lt;</span> <span class="n">tempSoftmaxValue</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">maxSoftmax</span> <span class="o">=</span> <span class="n">tempSoftmaxValue</span><span class="o">;</span>
                        <span class="k">switch</span> <span class="o">(</span><span class="n">labelName</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">case</span> <span class="s">"0"</span><span class="o">:</span>
                                <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"bird"</span><span class="o">;</span>
                                <span class="k">break</span><span class="o">;</span>
                            <span class="k">case</span> <span class="s">"1"</span><span class="o">:</span>
                                <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"cat"</span><span class="o">;</span>
                                <span class="k">break</span><span class="o">;</span>
                            <span class="k">case</span> <span class="s">"2"</span><span class="o">:</span>
                                <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"deer"</span><span class="o">;</span>
                                <span class="k">break</span><span class="o">;</span>
                            <span class="k">case</span> <span class="s">"3"</span><span class="o">:</span>
                                <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"dog"</span><span class="o">;</span>
                                <span class="k">break</span><span class="o">;</span>
                            <span class="k">case</span> <span class="s">"4"</span><span class="o">:</span>
                                <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"frog"</span><span class="o">;</span>
                                <span class="k">break</span><span class="o">;</span>
                            <span class="k">case</span> <span class="s">"5"</span><span class="o">:</span>
                                <span class="n">maxLabelName</span> <span class="o">=</span> <span class="s">"horse"</span><span class="o">;</span>
                                <span class="k">break</span><span class="o">;</span>
                        <span class="o">}</span>
                    <span class="o">}</span>

                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[onPostExecute] output is null state."</span><span class="o">);</span>
        <span class="o">}</span>

    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="n">_resultView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"Result : ["</span> <span class="o">+</span> <span class="n">maxLabelName</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>우리는 맨 처음에 Postman 으로 확인했을 때, json 형태의 응답이 오는 것을 알 수 있다.
그렇기 때문에 android에서 사용 가능한 JSON class를 import 하여 파싱하였다.</p>

<p>[ ] 로 시작하면 JSONArray로 객체를 만들고, { } 로 시작하면 JSONObject로 객체를 만들면 된다.</p>

<p>이렇게 파싱을 하고 나서, TextView 에 추론 결과 category를 적어주면 개발이 끝나게 된다.</p>

<hr />

<blockquote>
  <ul>
    <li>
      <p><strong>버그 1</strong> : AsyncTask로 수행하지 않으면, Android main thread에서 자체적으로 blocking을 한다.</p>
    </li>
    <li>
      <p><strong>버그 2</strong> : 헤더를 잘못 적으면, response string 이 전부 깨져서 올 수 있다. 이럴 경우 
<strong>헤더를 하나씩 소거하며 어떤 헤더를 잘못 적었는지 체크하고, 해당 헤더의 올바른 값을 찾거나 혹은 안써줘도 될 경우 그냥 쓰지말자…</strong></p>
    </li>
    <li><strong>참고 1</strong> : 나의 경우에서는 AccessKey를 넣어주기 때문에 Https 서버여도 POST가 가능했다. (별도 인증이 필요없음.) 
HTTP 통신의 경우 포스팅한 것처럼 하면 된다. 단, 클래스 import는 
<code class="language-plaintext highlighter-rouge">import javax.net.ssl.HttpsURLConnection;</code> 대신 <code class="language-plaintext highlighter-rouge">import java.net.HttpURLConnection;</code> 을 써주고
      <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HttpURLConnection urlConn = null;
urlConn = (HttpURLConnection) url.openConnection();
</code></pre></div>      </div>
      <p>으로 바꿔주자.</p>
    </li>
    <li>
      <p><strong>참고 2</strong> : Https의 경우 CA(인증서)와 같은 인증 정보가 별도로 필요하다고 한다.</p>
    </li>
    <li>
      <p><strong>참고 3</strong> : AsyncTask는 반드시 상속받아야 한다.</p>
    </li>
    <li><strong>참고 4</strong> : POST가 제대로 이루어지지 않았을 경우(response 400 code처럼) web browser 혹은 API 문서를 보고, 어떤 형태인지, Content-Type, Content-Disposition 등을 <strong>반드시</strong> 확인하자.</li>
  </ul>
</blockquote>]]></content><author><name>bolero2</name></author><category term="Android" /><summary type="html"><![CDATA[HttpURLConnection 클래스를 활용하여 HTTP 서버에 POST 요청하는 방법입니다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/thumbnail-android_https.png" /><media:content medium="image" url="http://localhost:4000/img/thumbnail-android_https.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[DL] Semantic Segmentation에서 Label Image 생성하기</title><link href="http://localhost:4000/deeplearning/2022/01/15/DL-Semantic-Segmentation-Create-Label-Image/" rel="alternate" type="text/html" title="[DL] Semantic Segmentation에서 Label Image 생성하기" /><published>2022-01-15T00:00:00+09:00</published><updated>2022-01-15T00:00:00+09:00</updated><id>http://localhost:4000/deeplearning/2022/01/15/DL-Semantic-Segmentation-Create-Label-Image</id><content type="html" xml:base="http://localhost:4000/deeplearning/2022/01/15/DL-Semantic-Segmentation-Create-Label-Image/"><![CDATA[<p><span class="tag  is-primary ">
    DeepLearning
</span>
<span class="tag  is-primary ">
    SemanticSegmentation
</span></p>

<h1 id="semantic-segmentation에서-label-image-생성하기">Semantic Segmentation에서 Label Image 생성하기</h1>

<p>semantic segmentation은 간단하게 보자면 <em>“<strong>Image</strong>” - “<strong>Image</strong>“</em> 관계의 학습입니다.</p>

<p>X 입력에는 보통 jpg든 png든 읽을 수 있는 Image file이 놓이고,<br />
Y 입력(정답)에는 보통 png 파일이 옵니다.</p>

<p>이번 포스팅에서는 <em><strong>어떻게 하면 라벨에 해당되는 Image file(.png)를 만들 수 있는지?</strong></em> 살펴보겠습니다.</p>

<hr />

<h2 id="0-intro"><strong>0. Intro</strong></h2>

<p>Semantic Segmentation Task를 학습하는데는 2가지 데이터가 필요합니다:
<strong><em>(Input) X Data : 학습할 Image dataset
(Input) Y Data : 학습할 Image에 대응되는 Color Map Image file</em></strong></p>

<p>특히, Y Data 의 경우에 “<strong>JPG</strong>” 포맷이 아닌 “<strong>PNG</strong>” 포맷을 사용하게 됩니다.</p>

<p>JPG 포맷은 손실 압축을 사용하기 때문에, 용량이 작다는 장점이 있지만
_<strong>사용자의 눈에 잡히지 않는 특정 부분의 Color 값이 변경된다는 특징</strong>_이 있습니다.</p>

<p>이번 글에서는 Semantic Segmentation의 Label Image를 생성하는 방법과 일반적인 Image Data 와의 차이점을 살펴보도록 하겠습니다.</p>

<hr />

<h2 id="1-about-semantic-segmentation"><strong>1. About Semantic Segmentation</strong></h2>
<p>시작하기에 앞서, Semantic Segmentation Task가 정확히 어떤 Task인지 알아야 합니다.
Semantic Segmentation Task의 경우, 
<strong>전체 이미지에 대해 각각의 픽셀이 어느 Label(=Category)에 속하는지 분류하는 문제</strong>입니다.</p>

<p>정교한 분류를 해내야 하기 때문에 <strong>Atrous Convolution</strong>과 같은 <strong>Receptive Field(수용 영역, 필터가 한 번에 볼 수 있는 영역)</strong>가 넓은 합성 곱 연산을 주로 사용합니다.</p>

<dl>
  <dt><strong>DeepLab V3+</strong> 코드 중에서, 가장 중요한 Loss Function 구현 부분을 보도록 하겠습니다.</dt>
  <dt>(Github Repository</dt>
  <dd>https://github.com/jfzhang95/pytorch-deeplab-xception)</dd>
</dl>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>

<span class="k">class</span> <span class="nc">SegmentationLosses</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">weight</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">batch_average</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="mi">255</span><span class="p">,</span> <span class="n">cuda</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">ignore_index</span> <span class="o">=</span> <span class="n">ignore_index</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">weight</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">batch_average</span> <span class="o">=</span> <span class="n">batch_average</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">cuda</span> <span class="o">=</span> <span class="n">cuda</span>

    <span class="k">def</span> <span class="nf">build_loss</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">'ce'</span><span class="p">):</span>
        <span class="s">"""Choices: ['ce' or 'focal']"""</span>
        <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="s">'ce'</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">CrossEntropyLoss</span>
        <span class="k">elif</span> <span class="n">mode</span> <span class="o">==</span> <span class="s">'focal'</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">FocalLoss</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">NotImplementedError</span>

    <span class="k">def</span> <span class="nf">CrossEntropyLoss</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">logit</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="n">n</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">w</span> <span class="o">=</span> <span class="n">logit</span><span class="p">.</span><span class="n">size</span><span class="p">()</span>
        <span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">CrossEntropyLoss</span><span class="p">(</span><span class="n">weight</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">weight</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">ignore_index</span><span class="p">,</span>
                                        <span class="n">reduction</span><span class="o">=</span><span class="s">'mean'</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">cuda</span><span class="p">:</span>
            <span class="n">criterion</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">.</span><span class="n">cuda</span><span class="p">()</span>

        <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">logit</span><span class="p">,</span> <span class="n">target</span><span class="p">.</span><span class="nb">long</span><span class="p">())</span>

        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">batch_average</span><span class="p">:</span>
            <span class="n">loss</span> <span class="o">/=</span> <span class="n">n</span>

        <span class="k">return</span> <span class="n">loss</span>

    <span class="k">def</span> <span class="nf">FocalLoss</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">logit</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">gamma</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">):</span>
        <span class="n">n</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">w</span> <span class="o">=</span> <span class="n">logit</span><span class="p">.</span><span class="n">size</span><span class="p">()</span>
        <span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">CrossEntropyLoss</span><span class="p">(</span><span class="n">weight</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">weight</span><span class="p">,</span> <span class="n">ignore_index</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">ignore_index</span><span class="p">,</span>
                                        <span class="n">reduction</span><span class="o">=</span><span class="s">'mean'</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">cuda</span><span class="p">:</span>
            <span class="n">criterion</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">.</span><span class="n">cuda</span><span class="p">()</span>

        <span class="n">logpt</span> <span class="o">=</span> <span class="o">-</span><span class="n">criterion</span><span class="p">(</span><span class="n">logit</span><span class="p">,</span> <span class="n">target</span><span class="p">.</span><span class="nb">long</span><span class="p">())</span>
        <span class="n">pt</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">logpt</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">alpha</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">logpt</span> <span class="o">*=</span> <span class="n">alpha</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="o">-</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="n">pt</span><span class="p">)</span> <span class="o">**</span> <span class="n">gamma</span><span class="p">)</span> <span class="o">*</span> <span class="n">logpt</span>

        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">batch_average</span><span class="p">:</span>
            <span class="n">loss</span> <span class="o">/=</span> <span class="n">n</span>

        <span class="k">return</span> <span class="n">loss</span>
</code></pre></div></div>

<p>위의 DeepLab V3+ Repository에 구현되어 있는 Loss Function 입니다.</p>

<p>여기서 우리는 핵심적인 코어 함수가 <strong>nn.CrossEntropyLoss</strong> 임을 알 수 있습니다.
Cross-Entropy Loss Function(이하 <strong>CE Loss</strong>)은 Semantic Segmentation Task(이하 <strong>분할 문제</strong>)이전에 분류 문제(Classification)에서 자주 쓰이는 손실 함수입니다.</p>

<p>그럼 왜 분류 문제와 분할 문제는 둘다 CE Loss를 쓰는 것일까요?</p>

<blockquote>
  <p>1) 분류 문제(Classification) 에서는 이미지 1장 전체에 대한 Label을 분류합니다.
(ex. 이 사진은 고양이 사진입니다!)</p>

  <p>2) 분할 문제(Semantic Segmentation) 에서는 이미지 1장 내의 1개 픽셀에 대한 Label을 분류합니다.
(ex. 이 픽셀은 고양이에 해당하는 픽셀입니다!)</p>
</blockquote>

<p>위에서 서술 하였듯이, 두 문제 모두 분류를 하긴 하지만 Classification 문제의 경우는 이미지 전체를 분류하고,
<strong>Semantic Segmentation 문제의 경우는 1개 픽셀에 대해서만 분류합니다.</strong></p>

<p>(분류 문제 신경망에서, Batch Size가 1이라고 가정한다면 단순히 
True-Label 1개와 Predicted-Label 1개를 비교하는 것처럼, 
True-Label’s 1–pixel과 Predicted-Label’s 1-pixel을 비교하는 것입니다.
이는 이미지의 width * height 수만큼 반복됩니다.)</p>

<p>1개 픽셀이라고 한다면?
일반적인 Color Image는 <strong>3채널의 RGB</strong> 값이 들어오지만, 
CE Loss를 사용하는 분할 문제 특성 상 <strong>1개 채널의 값</strong>이 들어오는데 이 값이 바로 <strong>Label Value</strong>가 되는 것입니다.</p>

<p>최종적으로, Semantic Segmentation Task의 학습 방식은</p>

<blockquote>
  <ol>
    <li>1개 픽셀 별로 Label 값을 다르게 준다.(Dataset 측면)</li>
    <li>CE Loss를 통해 손실 값을 구한다.</li>
    <li>Optimizer(SGD, Adam etc.)를 사용하여 해당 손실 값을 backward 방향으로 가중치를 갱신한다.</li>
  </ol>
</blockquote>

<p>3단계로 볼 수 있습니다.</p>

<hr />

<h2 id="2-cv2imwrite--vs-pascal-voc-annotation">2. cv2.imwrite( ) vs Pascal VOC Annotation</h2>
<p>Label Image 제작에 앞서, 실제로</p>

<ul>
  <li>일반적인 이미지 저장 함수 cv2.imwrite를 사용하여 저장한 Label Image</li>
  <li>Pascal VOC의 Semantic Segmentation Task의 Annotation Label Image</li>
</ul>

<p>를 비교해 보았습니다.
(Pascal VOC Dataset : host.robots.ox.ac.uk/pascal/VOC/voc2007)</p>

<p><strong><em>Mac OS — file command in terminal</em></strong>
<img src="https://images.velog.io/images/bolero2/post/bf3c4130-3bc6-4d4e-bdd8-c013ff4cbeb0/command.png" alt="file command in terminal" /></p>

<p>위 이미지는 2개의 이미지를 Terminal 상에서 file command로 읽어온 결과입니다.</p>

<p><strong><em>2009_001625.png — RAW Image file</em></strong>
<img src="https://images.velog.io/images/bolero2/post/166417ed-1203-4b76-a7c9-563b1ef34d5d/bottle1.png" alt="2009_001625.png" /></p>

<p><strong>2009_001625.png</strong> 파일은 Pascal VOC Dataset에서 가져온 파일이고,
<strong>2009_001625_RGB.png</strong> 파일은 cv2.imwrite( ) 함수로 저장한 파일입니다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">2009_001625.png(VOC IMAGE)</th>
      <th style="text-align: center">2009_001625_RGB.png(cv2.imwrite IMAGE)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><img src="https://images.velog.io/images/bolero2/post/5a20712b-14a2-4374-a4b4-72e31dc1683d/bottle1.png" alt="2009_001625.png" /></td>
      <td style="text-align: center"><img src="https://images.velog.io/images/bolero2/post/5b4e2800-04c5-4cbb-a3d7-de24198f7da1/bottle1_RGB.png" alt="2009_001625_RGB.png" /></td>
    </tr>
  </tbody>
</table>

<p>명령어 결과를 보면, VOC Image는 8-bit colormap 파일이지만 cv2.imwrite로 저장한 Image는 8-bit/color RGB 파일입니다.
사람이 보기엔, 육안상으로는 어떤 차이가 있을까요?</p>

<p>어떤 이미지가 Pascal VOC인지 모를 정도로 너무 유사합니다…
육안상으로도 전혀 차이점이 없습니다. 
차이점이라고는 위에서 언급한 8-bit colormap이냐, 8-bit/color RGB 파일이냐 차이입니다.
우리는 여기서 PNG 포맷의 특성과 Label Image와의 관계에 대해 알아볼 필요가 있습니다.</p>

<hr />

<h2 id="3-png-format-and-segmentation-label-image">3. PNG Format <em>and</em> Segmentation Label Image</h2>
<p>PNG 포맷을 사용하는 이유는 JPG와 같은 손실압축 방식이 아닌,
원본 그대로의 Color 값을 저장합니다.</p>

<p>그리고 아주 중요한 특징이 하나 더 있는데, 바로
<strong>Palette 정보를 넣을 수 있다는 점</strong>입니다.</p>

<p>Palette 정보가 이미지에 들어가게 되면 Image Array는 더 이상 3채널이어야 할 필요가 없어집니다. 이를</p>

<blockquote>
  <p><strong>“Indexed Image”</strong></p>
</blockquote>

<p>라고 부릅니다.</p>

<p>말 그대로 <strong>“색인화 된 이미지”</strong> 인 것이죠.</p>

<p>Index 정보는 Palette가 되는 것이고, Image Array에는 단순히 1채널의 공간에 색인 정보(Index value)만 넣어주면 됩니다.
추후에 Palette를 바꾸게 되면, Image의 색상 값도 바뀌게 되는 것입니다.</p>

<p><strong>Semantic Segmentation은 Pixel에 대한 라벨 값을 학습할 때, 이 Index value를 학습하게 됩니다.</strong></p>

<hr />

<h2 id="4-how-create-label-image">4. <em>How create</em>… Label Image?</h2>
<p>위에서 
<em>1) 왜 PNG 포맷을 사용해야 하는지,</em>
<em>2) Indexed Image란 무엇인지,</em>
<em>3) 왜 cv2.imwrite( )와 같은 일반적인 이미지 저장 함수로 저장하면 안되는지</em>
알아보았습니다.</p>

<p>이제는 Polygon 타입의 Label Image (for Segmentation)를 제작해보겠습니다.
준비물은 다음과 같습니다:</p>

<blockquote>
  <ol>
    <li>Color Map과 Palette 정보</li>
    <li>저장할 Image 정보(file 형식, numpy.ndarray 형식 모두 상관 없습니다.)</li>
  </ol>
</blockquote>

<hr />

<p><strong><em>Color Map을 생성하는 코드입니다.</em></strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
 
<span class="k">def</span> <span class="nf">make_colormap</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="mi">256</span><span class="p">):</span>
   <span class="k">def</span> <span class="nf">bit_get</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
       <span class="k">return</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;&gt;</span> <span class="n">idx</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span>
 
   <span class="n">colormap</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">num</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
   <span class="n">ind</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
 
   <span class="k">for</span> <span class="n">shift</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">))):</span>
       <span class="k">for</span> <span class="n">channel</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
           <span class="n">colormap</span><span class="p">[:,</span> <span class="n">channel</span><span class="p">]</span> <span class="o">|=</span> <span class="n">bit_get</span><span class="p">(</span><span class="n">ind</span><span class="p">,</span> <span class="n">channel</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">shift</span>
       <span class="n">ind</span> <span class="o">&gt;&gt;=</span> <span class="mi">3</span>
 
   <span class="k">return</span> <span class="n">colormap</span>
 
<span class="n">cmap</span> <span class="o">=</span> <span class="n">make_colormap</span><span class="p">(</span><span class="mi">256</span><span class="p">).</span><span class="n">tolist</span><span class="p">()</span>
<span class="n">palette</span> <span class="o">=</span> <span class="p">[</span><span class="n">value</span> <span class="k">for</span> <span class="n">color</span> <span class="ow">in</span> <span class="n">cmap</span> <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">color</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">cmap</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">palette</span><span class="p">)</span>
</code></pre></div></div>

<p>위 코드는 Color Map을 생성하는 코드입니다.</p>

<p>Pascal VOC에서 해당 방식으로 Color Map을 생성하여 [20개 라벨 + background] 까지 하여 총 21개의 색상 값을 사용합니다.</p>

<p>우리가 저 코드에서 사용할 변수는 <strong>cmap</strong> 과 <strong>palette</strong> 가 있습니다.
<strong>cmap</strong> 은 Image에 색인 정보를 넣어줄 때 사용할 것이고, 
<strong>palette</strong> 는 PNG 포맷으로 저장할 때 넣어줄 팔레트 정보입니다.</p>

<p>해당 코드 동작 결과는 다음과 같습니다:</p>
<blockquote>
  <p>[0, 0, 0, 128, 0, 0, 0, 128, 0, 128, 128, 0, 0, 0, 128, 128, 0, 128, 0, 128, 128, … ]</p>
</blockquote>

<p>보시다시피 앞에서 3개씩 끊어서 볼 수 있습니다.</p>

<p>예를 들어, 0번 라벨(background)의 경우 RGB 값은 [0, 0, 0]이 될 것이고,
1번 라벨(aeroplane)의 경우 RGB 값은 [128, 0, 0]이 될 것이며, 
2번 라벨(bicycle)의 경우 RGB 값은 [0, 128, 0]이 될 것입니다.</p>

<p>(이는 사용자가 직접 값을 넣어줘도 상관없습니다. 본문에서는 Pascal VOC Dataset을 사용하여 실험하였기 때문에, Pascal VOC Dataset의 Category 정보와 색상 정보를 사용하였습니다.)</p>

<hr />

<p>Color Map과 Palette 정보를 생성하였다면, 이미지에 색인 정보와 Palette를 함께 넣어주기만 하면 됩니다.</p>

<p><em><strong>Label Image 생성 코드</strong></em></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>


<span class="c1"># Image data to save = image_data(numpy.ndarray)
</span><span class="n">label_img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">image_data</span><span class="p">)</span>
 
<span class="c1"># if image array has BGR order
</span><span class="n">label_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">label_img</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2RGB</span><span class="p">)</span>
<span class="c1"># Create an unsigned-int (8bit) empty numpy.ndarray of the same size (shape)
</span><span class="n">img_png</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">label_img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">label_img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">)</span>
 
<span class="c1"># Assign index to empty ndarray. Finding pixel location using np.where.
# If you don't use np.where, you have to run a double for-loop for each row/column.
</span><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">val_col</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">cmap</span><span class="p">):</span>
    <span class="n">img_png</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">all</span><span class="p">(</span><span class="n">label_img</span> <span class="o">==</span> <span class="n">val_col</span><span class="p">,</span> <span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">))]</span> <span class="o">=</span> <span class="n">index</span>
 
<span class="c1"># Convert ndarray with index into Image object (P mode) of PIL package
</span><span class="n">img_png</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">(</span><span class="n">img_png</span><span class="p">).</span><span class="n">convert</span><span class="p">(</span><span class="s">'P'</span><span class="p">)</span>
<span class="c1"># Palette information injection
</span><span class="n">img_png</span><span class="p">.</span><span class="n">putpalette</span><span class="p">(</span><span class="n">palette</span><span class="p">)</span>
<span class="c1"># save image
</span><span class="n">img_png</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">'output.png'</span><span class="p">)</span>
</code></pre></div></div>

<p>위 코드는 실제로 Label Image를 생성하는 코드입니다.</p>

<p>순서는 다음과 같습니다:</p>
<blockquote>
  <ol>
    <li>image data를 numpy.ndarray 타입으로 호출합니다.</li>
    <li>BGR 순서라면 RGB 순서로 바꿔줍니다.</li>
    <li>동일한 크기의 unsigned-int (8bit) ndarray를 생성합니다.</li>
    <li><strong>각 Color Map의 색상 정보를 찾아서, 색인화 과정을 합니다.</strong>
(이미지의 픽셀을 돌며 비교하는 것이 아닌, Color Map의 1-Row에 해당하는 값을 한번에 바꿔주는 형식으로 합니다.)</li>
    <li>색인화 된 이미지 행렬을 ‘P’ mode로 저장합니다.(<strong>P</strong> mode는 <strong>Palette</strong> 모드입니다.)</li>
    <li>위에서 생성한 Palette를 넣어줍니다.</li>
    <li>png format으로 이미지를 저장합니다.</li>
  </ol>
</blockquote>

<p>이렇게 하면 Palette 정보가 있는 색인화 된 이미지 파일을 생성할 수 있습니다.</p>

<p>이렇게 생성된 이미지 파일은 바로 Semantic Segmentation의 학습에 사용 가능하며, Predict 함수에서 출력된 결과를 저장할 때도 이러한 방식으로 저장하여 성능 측정이 가능합니다.</p>

<hr />

<h2 id="5-result">5. Result</h2>
<ol>
  <li>Semantic Segmentation의 Label Image 생성 시, 일반적인 이미지 저장 방식으로 저장하면 안됩니다.</li>
  <li>Color Map과 Palette 정보가 포함된, Indexed Image를 제작해야 합니다.</li>
  <li>그 이유는 Segmentation 학습이 CE Loss를 사용하는데, 여기서 1-Pixel에 대해 1개의 값(=label value)을 비교하기 때문입니다.</li>
  <li>사용자가 Augmentation 혹은 Annotation 시에, 특정 Color Map을 생성 후에 Pixel의 Label Value에 색인화 시켜주는 작업이 필요합니다. 
(상단 소스코드 참조)</li>
</ol>]]></content><author><name>bolero2</name></author><category term="DeepLearning" /><summary type="html"><![CDATA[Semantic Segmentation에서 사용하는 라벨링 데이터에 대해 알아보고, 어떻게 제작할 수 있는지 알아봅니다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/thumbnail-segmentation_label.png" /><media:content medium="image" url="http://localhost:4000/img/thumbnail-segmentation_label.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">[Paper] DETR - End-to-End Object Detection with Transformer</title><link href="http://localhost:4000/paper/2022/01/12/Paper-DETR-End-to-End-Object-Detection-with-Transformer/" rel="alternate" type="text/html" title="[Paper] DETR - End-to-End Object Detection with Transformer" /><published>2022-01-12T00:00:00+09:00</published><updated>2022-01-12T00:00:00+09:00</updated><id>http://localhost:4000/paper/2022/01/12/Paper-DETR-End-to-End-Object-Detection-with-Transformer</id><content type="html" xml:base="http://localhost:4000/paper/2022/01/12/Paper-DETR-End-to-End-Object-Detection-with-Transformer/"><![CDATA[<p><span class="tag  is-primary ">
    Paper
</span>
<span class="tag  is-primary ">
    DeepLearning
</span>
<span class="tag  is-primary ">
    Transformer
</span></p>

<h1 id="detr---end-to-end-object-detection-with-transformer">DETR - End-to-End Object Detection with Transformer</h1>

<p>이번에 소개할 논문은 Facebook AI 팀에서 공개한<br />
Transformer 방식을 Computer Vision의 Object Detection 분야에 적용시킨 <strong>DETR</strong>입니다.</p>

<p>DETR은 <strong>DE</strong>tection + <strong>TR</strong>ansformer 의 줄임말로, 이름에서부터 Transformer가 Detection 방식에 사용됨을 유추할 수 있습니다.</p>

<p>논문 제목에서 <strong>End-to-End</strong> 라는 말의 의미는,<br />
(뒤에 등장하지만)기존 Detection Network가 가지고 있는 초매개변수(<strong>Hyper-Parameter</strong>, ex. NMS, threshold, anchor-box etc.)를<br />
Transformer의 End-to-End 방식의 학습을 통해 없앴다고 볼 수 있습니다.</p>

<hr />

<h2 id="1-abstract">1. Abstract</h2>

<p>논문에서 크게 주장하는 핵심은 다음과 같습니다:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 사용자가 설정해야 하는 것(Hand-designed Components) 을 제거  
2. Simple한 Network 구성  
3. 이분법적 매칭(Bipartite Matching)과 Transformer의 Encoder-Decoder 구조 사용  
</code></pre></div></div>
<p>추가적으로, Object Detection 분야 뿐 만 아니라<br />
<strong>Panoptic Segmentation(a.k.a Instance Segmentation)</strong> 분야에서도 좋은 성능을 보여준다고 합니다.</p>

<hr />

<h2 id="2-model-architecture">2. Model Architecture</h2>

<p>네트워크의 전체적인 구성은 다음과 같습니다:</p>

<p><img src="https://user-images.githubusercontent.com/41134624/105303525-e6fb9400-5bfe-11eb-947c-ef4939938df6.jpg" alt="model1" /></p>

<p>해당 네트워크는 크게 본다면</p>
<blockquote>
  <p>1) <strong>C</strong>onvolution <strong>N</strong>eural <strong>N</strong>etwork(ResNet)
2) <strong>Transformer</strong> Encoder
3) <strong>Transformer</strong> Decoder
4) <strong>F</strong>eed-<strong>F</strong>oward <strong>N</strong>etwork(FFN)</p>
</blockquote>

<p>이렇게 4단계로 구분할 수 있습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DETR은 이 4단계를 통해 입력 데이터를 곧바로 분류 정보 및 bbox 정보를 추론 하기 때문에,  
NMS와 같은 사용자의 입력 값을 요구하는 알고리즘이 필요하지 않습니다.
</code></pre></div></div>

<h3 id="1-convolution-neural-network">1) Convolution Neural Network</h3>

<p>CNN의 주 목적은 입력 영상 데이터의 <em><strong>특징 추출</strong></em> 입니다.<br />
논문에서 사용한 CNN(=Backbone)은 ResNet으로,<br />
<strong>3ch * W * H</strong> 영상 데이터가 입력으로 들어온 후 &gt; 최종 <strong>2048ch * W/32 * H/32</strong> 크기의 Feature Map을 생성합니다.</p>

<p><img src="https://user-images.githubusercontent.com/41134624/105318677-262de300-5c07-11eb-983c-c26c68abe782.jpg" alt="resnet" /></p>

<p>저자는 Backbone CNN으로 ResNet50 모델을 사용하였는데,<br />
해당 모델의 맨 마지막 channel 깊이는 <strong>2048</strong>임을 알 수 있습니다.</p>

<h3 id="2-transformer-encoder">2) Transformer Encoder</h3>

<p>CNN을 거쳐 생성된 Feature Map은 1x1 convolution을 통해 <strong>d 차원</strong>(=d 채널)으로 축소됩니다.</p>
<blockquote>
  <ul>
    <li><em><strong>Encoder는 Sequence Data를 입력으로 받기 때문에, Vectorizing함을 알 수 있습니다.</strong></em></li>
    <li><em><strong>또한, 축소 된 d 채널은 Spatial하게 분리하여 H*W 크기로 구성된 d 개의 조각으로 분리할 수 있습니다.</strong></em></li>
  </ul>
</blockquote>

<p>2) Transformer Encoder
CNN을 거쳐 생성된 Feature Map은 1x1 convolution을 통해 d 차원(=d 채널)으로 축소됩니다.</p>

<p>Encoder는 Sequence Data를 입력으로 받기 때문에, Vectorizing함을 알 수 있습니다.
또한, 축소 된 d 채널은 Spatial하게 분리하여 H*W 크기로 구성된 d 개의 조각으로 분리할 수 있습니다.</p>

<p>각각의 d개 조각은 Encoder Layer의 입력으로 Sequencial하게 들어가며, Encoder Layer는 기본적인 구조로 구성되어 있습니다.</p>
<blockquote>
  <ul>
    <li><em><strong>Encoder Layer는 Multi-head Self-attention module로 구성되어 있습니다.</strong></em></li>
  </ul>
</blockquote>

<p>Encoder에서 살펴 볼 것은 다음과 같습니다:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* 원래 Transformer는 입력 데이터의 순서가 출력 데이터에 영향을 주지 않습니다.
* 하지만 Vision 문제에서는 분리 된 d개의 조각에 대한 순서다가 중요하기 때문에 각각의 Attention Layer마다 Position Embedding을 실시합니다.
</code></pre></div></div>

<h3 id="3-transformer-decoder">3) Transformer Decoder</h3>

<p>Decoder 역시 Encoder와 동일하게 Standard한 구조를 따릅니다.<br />
Encoder의 출력으로 d size의 N Embedding이 나오고, 이는 그대로 Decoder의 입력으로 들어갑니다.</p>

<p>Decoder에서 살펴 볼 것은 다음과 같습니다:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* 원래의 Decoder는 분리 된 d 개의 조각을 하나의 Sequence로 보고, 통째로 입력 데이터로 들어갑니다.
* 하지만 DETR에서는 각각의 Decoder Layer마다 N 개의 Embedding 객체를 Parallel하게 Decoding합니다.
* 또한, Encoder처럼 각각의 Attention Layer에 Object Query를 추가하여 Position Embedding과 유사한 작업을 합니다.
</code></pre></div></div>

<h3 id="4-feed-foward-networkffn">4) Feed-Foward Network(FFN)</h3>

<p>FFN 같은 경우는 단순한 구조로 되어 있습니다:</p>
<blockquote>
  <ul>
    <li>3 Layer의 Perceptron으로 구성되어 있습니다.</li>
    <li>각각의 Perceptron은 ReLU 활성화 함수와 d 차원의 은닉층, 1개의 Linear Projection으로 되어 있습니다.</li>
  </ul>
</blockquote>

<p>또한, FFN을 거치게 되면 Predict한 값이 나오게 되는데, 이 값은 다음과 같습니다:</p>
<blockquote>
  <p>1) Center X (relative)
2) Center Y (relative)
3) Height (relative)
4) Width (relative)</p>
</blockquote>

<p>(Relative한 좌표는 픽셀의 개수를 count하는 절대 좌표가 아닌, 이미지 전체의 H/W에 비례하는 0과 1사이의 좌표 값입니다.)</p>

<p>FFN은 Softmax 함수를 통해 분류 라벨 또한 Predict 합니다.<br />
Predict 할 때, Ground-Truth 개수가 5개이고, Detection 객체 개수가 7개라면<br />
Ground-Truth 쪽에 2개의 (no object)를 만들어줍니다.</p>

<p><img src="https://user-images.githubusercontent.com/41134624/105328912-e5889680-5c13-11eb-8a99-9e9e822a3da2.jpg" alt="label_predict" /></p>

<p>그림과 같이, 4개의 객체를 검출했다면, 2개는 (no object) 항목으로 할당하고 2개는 정답으로 처리하여 <strong>이분법(bipartite)적으로 처리하게 됩니다.</strong></p>

<hr />

<h2 id="3-experiments">3. Experiments</h2>

<p>실험 조건은 다음과 같습니다:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Item</th>
      <th style="text-align: center">Content</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Comparison Network</td>
      <td style="text-align: center">Faster-RCNN</td>
    </tr>
    <tr>
      <td style="text-align: center">Optimizer</td>
      <td style="text-align: center">AdamW</td>
    </tr>
    <tr>
      <td style="text-align: center">Backbone</td>
      <td style="text-align: center">ResNet-50, ResNet-101</td>
    </tr>
    <tr>
      <td style="text-align: center">Epoch</td>
      <td style="text-align: center">300</td>
    </tr>
    <tr>
      <td style="text-align: center">Dataset</td>
      <td style="text-align: center">COCO 2017</td>
    </tr>
  </tbody>
</table>

<p>실험에 사용된 Dataset은 <a href="https://cocodataset.org/#home">COCO 2017</a>의 detection + segmentation 데이터 세트 입니다.<br />
Segmentation은 Panoptic Segmentation의 성능 측정을 위해 사용하였습니다.</p>

<p><img src="https://user-images.githubusercontent.com/41134624/105329673-bf172b00-5c14-11eb-8ca7-468b4020761e.jpg" alt="exp1" /></p>

<p>그림에서 보는 것과 같이,</p>
<ol>
  <li>대부분의 상황에서 DETR의 parameter 개수가 현저히 낮음을 알 수 있으며,</li>
  <li>Average Precision은 6 case 중 4 case에서 Faster-RCNN보다 높음을 알 수 있습니다.</li>
</ol>

<p>여기서 Faster-RCNN이 높은 케이스 중, AP-Small size는 Faster-RCNN이 27.2로 23.7의 DETR보다 우월하게 높습니다.</p>

<p><strong>즉, DETR은 작은 Object에 대해서 상대적으로 약함을 보입니다.</strong></p>

<hr />

<h2 id="4-source-code">4. Source Code</h2>

<p>논문의 저자는 Paper 맨 뒤에 간단한 구현 코드를 공개했습니다.<br />
Abstract에서 말한 것처럼, 코드는 매우 간단한 구조로 되어 있습니다:</p>

<p><img src="https://user-images.githubusercontent.com/41134624/105314318-75711500-5c01-11eb-98b2-90eae749d3d0.jpg" alt="code" /></p>

<p>이 코드에서 우리는 ResNet-50 모델을 사용한 것과, 내부 프레임워크에서 제공하는 수준의 Transformer 함수를 그대로 사용한 것을 알 수 있습니다.</p>

<hr />

<p><strong>(Paper Review는 제가 스스로 읽고 작성한 글이므로, 주관적인 내용임을 밝힙니다.)</strong></p>]]></content><author><name>bolero2</name></author><category term="Paper" /><summary type="html"><![CDATA[Facebook AI 팀에서 발표한, Transformer를 Object Detection task에 사용한 논문입니다.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/thumbnail-detr.png" /><media:content medium="image" url="http://localhost:4000/img/thumbnail-detr.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>